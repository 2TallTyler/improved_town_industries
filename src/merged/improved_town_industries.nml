/* *** Begin Header *** */

/*
*
*	Welcome to Improved Town Industries!
*	
*/


grf {
	grfid: "TT\04\01";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version: 17;
	min_compatible_version: 11;

	url: string(STR_WEBSITE);

	param 0 {
		param_primary_only {
			name: string(STR_PARAM_NAME_PRIMARY_ONLY);
			desc: string(STR_PARAM_DESC_PRIMARY_ONLY);
			def_value: 0;
			type: bool;
		}
	}

	param 1 {
		param_elevation_checks {
			name: string(STR_PARAM_NAME_ELEVATION_CHECKS);
			desc: string(STR_PARAM_DESC_ELEVATION_CHECKS);
			def_value: 0;
			type: bool;
		}
	}
	
	param 2 {
		param_auto_farm_fields {
			name: string(STR_PARAM_NAME_AUTO_FARM_FIELDS);
			desc: string(STR_PARAM_DESC_AUTO_FARM_FIELDS);
			def_value: 1;
			type: bool;
		}
	}
	
	param 3 {
		param_oil_rigs {
			name: string(STR_PARAM_NAME_OIL_RIGS);
			desc: string(STR_PARAM_DESC_OIL_RIGS);
			def_value: 1;
			type: bool;
		}
	}
	
	param 4 {
		param_nuclear {
			name: string(STR_PARAM_NAME_NUCLEAR);
			desc: string(STR_PARAM_DESC_NUCLEAR);
			def_value: 0;
			type: bool;
		}
	}

/* 	
*	This must always be Parameter 5, for compatibility with house sets which check this parameter!
*	Note: Waste & Recyclables is activated by parameter rather than automatically if a compatible house set is loaded, to allow helping players with error messages. 
*/
	param 5 {
		param_recyclables {
			name: string(STR_PARAM_NAME_RECYCLABLES);
			desc: string(STR_PARAM_DESC_RECYCLABLES);
			def_value: 0;
			type: bool;
		}
	}
	
	param 6 {
		param_industry_population {
			name: string(STR_PARAM_NAME_INDUSTRY_POP);
			desc: string(STR_PARAM_DESC_INDUSTRY_POP);
			min_value: 0;
			def_value: 300;
			type: int;
		}
	}

}

/* Disable base game industries, except Oil Rig */
disable_item(FEAT_INDUSTRIES, 0, 4);
disable_item(FEAT_INDUSTRIES, 6, 36);

/* Disable base game cargos */
disable_item(FEAT_CARGOS);

/* Increase base costs for funding industries to 4x the base cost. This gives us a greater range of possible purchase prices for funding industries.
   Note that this also increase the cost to fund a town, so we also decrement that by the same factor to leave it unchanged.
*/
basecost {
	PR_BUILD_INDUSTRY: 2;
	PR_BUILD_TOWN: -2;
}

/* Create an error if OpenTTD version is before 1.10.0 (required for increased cargo types at industries) */
if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

/* Create an error if Recyclables parameter is active but no compatible town set is active */
if (param_recyclables == 1 &&

	(
		((grf_current_status("TT\03\01") == 1 || grf_future_status("TT\03\01") == 1) && param["TT\03\01", 254] < 11) 	// Improved Town Layouts is loaded but not recent (1.3.0 or better)
		||																												// or
		(grf_current_status("TT\03\01") == 0 && grf_future_status("TT\03\01") == 0) 									// Improved Town Layouts is not loaded
	)
	&&																													// And another compatible house set isn't loaded:
	grf_future_status("MLS\01") == 0	// OpenGFX Mars Towns - Late Start
	&&
	grf_future_status("TT12") == 0		// Yankee Houses
	
	) {
	error(FATAL, string(STR_ERROR_RCLC_NEEDS_ITL));
}


/* Create an error if a conflicting industry replacement set is active - thanks to FIRS for much of this code */

if (grf_future_status("Meo\81")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "New Cargos"));}

if (grf_future_status("Meo\82")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "New Cargos Petrol + Tourists"));}

if (grf_future_status("\4D\65\6F\9D")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Houses"));}

if (grf_future_status("Meo\91")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Town Vector"));}

if (grf_future_status("Meo\92")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic Vector"));}

if (grf_future_status("\4D\65\6F\9F")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic vector II"));}

if (grf_future_status("Meo\93")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Chemical Vector"));}

if (grf_future_status("\4D\65\6F\9C")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Chemicals vector II"));}

if (grf_future_status("Meo\94")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Machinery Vector"));}

if (grf_future_status("Meo\95")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Wood Vector"));}

if (grf_future_status("Meo\96")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Construction Vector"));}

if (grf_future_status("Meo\97")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Agricultural Vector"));}

if (grf_future_status("Meo\98")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic for Arctic"));}

if (grf_future_status("Meo\99")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic for Tropic"));}

if (grf_future_status("Meo\9A")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Machinery for Tropic"));}

if (grf_future_status("Meo\9B")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Construction Vector by Pikkabird"));}

if (grf_future_status("Meo\9C")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Chemical Vector II"));}

if (grf_future_status("MCEe")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECSext"));}

if (grf_future_status("\4A\53\0A\70")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Industries Addon"));}

if (grf_future_status("SK\05\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\02")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\03")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\04")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\05")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("EX\01\02")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("EX\01\03")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("DD\06\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "UKRS Industries"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Manual Industries"));}

if (grf_future_status("SLTU")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Tourist Set"));}

if (grf_future_status("SZ\13D")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Oil well decrease neutralizer"));}

if (grf_future_status("EH\01\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Experts hard industries"));}

if (grf_future_status("DD\06\03")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "UKRS Brick Chain"));}

if (grf_future_status("DD\06\02")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Pikka Basic Industries"));}

if (grf_future_status("mb\08\00")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "NewCargos by Michael Blunck"));}

if (grf_future_status("EELS")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Eels"));}

if (grf_future_status("EN\15\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Apollo Rocket Industry Set"));}

if (grf_future_status("\F1%\00\05")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIRS 1"));}

if (grf_future_status("\F1%\00\06")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIRS 2"));}

if (grf_future_status("\F1%\00\07")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIRS 3"));}

if (grf_future_status("\F1%\00\08")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIRS 4"));}

if (grf_future_status("MCF1")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIXES"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Manual Industries II"));}

if (grf_future_status("McMi")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Manpower Industries"));}

if (grf_future_status("\45\4E\31\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "North Korean Industry Set"));}

if (grf_future_status("\52\54\4E\41")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Representative UK Train Set - Extended"));}

if (grf_future_status("\44\44\01\10")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Town and Industry - Basic Industries"));}

if (grf_future_status("\41\4C\01\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "station's name from nearby industries"));}

if (grf_future_status("\6A\54\72\83")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Wannaroo Basic Industries"));}

if (grf_future_status("\6A\64\72\04")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Wannaroo Extra Industries"));}

if (grf_future_status("\56\45\03\03")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "YETI Extended Towns and Industries"));}

if (grf_future_status("\4E\4D\11\13")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "North American Industry Set (NAIS)"));}

if (grf_future_status("\4A\44\88\07")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "XIS Extreme Industry Set"));}

if (grf_future_status("AZ\20\77")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Wasteland"));}

if (grf_future_status("GGQT")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "One Tile Industry Set"));}

/* *** End Header *** */


/* Begin Functions */

/* ================ */
/* Global Functions */
/* ================ */

/* Choose the proper economy automatically based on the climate. 
 * 1: Temperate (fallback)
 * 2: not used, reserved
 * 3: Sub-Tropic 
 */
if (climate == CLIMATE_TEMPERATE) {
	selected_economy = 1;
} else if (climate == CLIMATE_ARCTIC) {
	selected_economy = 1;
} else if (climate == CLIMATE_TROPIC) {
	selected_economy = 1;
} else if (climate == CLIMATE_TOYLAND) {
	selected_economy = 1;
}

/* ================================== */		
/* Functions for Temperate industries */
/* ================================== */

/* Shared function for processing industries to check the population required to build and store it in temporary register 1 */
switch (FEAT_INDUSTRIES, SELF, StoreAdjustedRequiredPopulation, fraction, STORE_TEMP(
	// Count existing processing industries in town
	industry_town_count(industry_oil_refinery,-1)		* param_industry_population +
	industry_town_count(industry_paper_mill,-1) 		* param_industry_population +
	industry_town_count(industry_steel_mill,-1)			* param_industry_population +
	industry_town_count(industry_factory,-1)			* param_industry_population +
	industry_town_count(industry_power_plant,-1)		* param_industry_population +
	industry_town_count(industry_recycling_center,-1)	* param_industry_population +
	industry_town_count(industry_sawmill,-1)			* param_industry_population +
	industry_town_count(industry_nuclear_fuel_plant,-1)	* param_industry_population +
	(param_industry_population / fraction) // Add population required for this industry, adjusted by fraction parameter for early starts
	, 1))
	{return 0;}
	
switch (FEAT_INDUSTRIES, SELF, StoreRequiredPopulation, current_year) {
	0..1850: return StoreAdjustedRequiredPopulation(3); // 1/3 of population required for early games
	return StoreAdjustedRequiredPopulation(1); // 1/1 population required otherwise
}

/* Generate secondary industries in an industrial district */

/* Check the range of other industries */
/* Note: If an industry doesn't exist within range, the distance is 65535, which evaluates to False */
switch (FEAT_INDUSTRIES, SELF, switch_industrial_district_2,
		(industry_distance(industry_oil_refinery, -1) < 15) ||
		(industry_distance(industry_paper_mill, -1) < 15) ||
		(industry_distance(industry_steel_mill, -1) < 15) ||
		(industry_distance(industry_factory, -1) < 15) ||
		(industry_distance(industry_power_plant, -1) < 15) ||
		(industry_distance(industry_recycling_center, -1) < 15) ||
		(industry_distance(industry_sawmill, -1) < 15) ||
		(industry_distance(industry_nuclear_fuel_plant, -1) < 15)
	) // 1 if this industry is within 20 tiles of an industry, 0 if out of range
	{1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

/* Check if another industry exists in town */
switch (FEAT_INDUSTRIES, SELF, switch_industrial_district_1,
		(industry_town_count(industry_oil_refinery,-1) > 0) ||
		(industry_town_count(industry_paper_mill,-1) > 0) ||
		(industry_town_count(industry_steel_mill,-1) > 0) ||
		(industry_town_count(industry_factory,-1) > 0) ||
		(industry_town_count(industry_power_plant,-1) > 0) ||
		(industry_town_count(industry_recycling_center,-1) > 0) ||
		(industry_town_count(industry_sawmill,-1) > 0) ||
		(industry_town_count(industry_nuclear_fuel_plant,-1) > 0)
	) // 1 if another industry exists in town, 0 if no other industry exists
		{1: switch_industrial_district_2; CB_RESULT_LOCATION_ALLOW;}

/* =================================== */		
/* Functions for Sub-Tropic industries */
/* =================================== */		

/* End Functions */


/* *** Begin Cargos *** */

cargotable {
	PASS, COAL, MAIL, OIL_, GOOD, WOOD, IORE, STEL, WDPR, RFPR, RCYC, WSTE, FOOD, URAN, NUKF, NUKW
	}

/* Temperate Cargos */
if (selected_economy == 1) {

	// Original ID
	item (FEAT_CARGOS, cargo_passengers, 0) {
		property {
			number:						0x00;
			sprite:						4297;
			type_name:					TTD_STR_CARGO_PLURAL_PASSENGERS;
			unit_name:					TTD_STR_CARGO_SINGULAR_PASSENGER;
			type_abbreviation:			TTD_STR_ABBREV_PASSENGERS;
			weight:						0.0625;
			is_freight:					0;
			cargo_classes:				bitmask(CC_PASSENGERS);
			cargo_label:				"PASS";
			town_growth_effect:			TOWNGROWTH_PASSENGERS;
			town_growth_multiplier:		1.0;
			units_of_cargo:				TTD_STR_PASSENGERS;
			items_of_cargo:				TTD_STR_QUANTITY_PASSENGERS;
			penalty_lowerbound:			0;
			single_penalty_length:		22;
			station_list_colour:		152;
			cargo_payment_list_colour:	152;
			price_factor:				105;
			capacity_multiplier:		4;
		}
	}

	// Original ID
	item (FEAT_CARGOS, cargo_coal, 0x01) {
		property {
			number:						0x01;
			sprite:						4298;
			type_name:					TTD_STR_CARGO_PLURAL_COAL;
			unit_name:					TTD_STR_CARGO_SINGULAR_COAL;
			type_abbreviation:			TTD_STR_ABBREV_COAL;
			weight:						1;
			is_freight:					1;
			cargo_classes:				bitmask(CC_BULK);
			cargo_label:				"COAL";
			town_growth_effect:			TOWNGROWTH_NONE;
			town_growth_multiplier:		0;
			units_of_cargo:				TTD_STR_TONS;
			items_of_cargo:				TTD_STR_QUANTITY_COAL;
			penalty_lowerbound:			30;
			single_penalty_length:		255;
			station_list_colour:		6;
			cargo_payment_list_colour:	6;
			price_factor:				56;
			capacity_multiplier:		1;		
		}
	}

	// Original ID
	item (FEAT_CARGOS, cargo_mail, 0x02) {
		property {
			number:						0x02;
			sprite:						4299;
			type_name:					TTD_STR_CARGO_PLURAL_MAIL;
			unit_name:					TTD_STR_CARGO_SINGULAR_MAIL;
			type_abbreviation:			TTD_STR_ABBREV_MAIL;
			weight:						0.25;
			is_freight:					0;
			cargo_classes:				bitmask(CC_MAIL);
			cargo_label:				"MAIL";
			town_growth_effect:			TOWNGROWTH_MAIL;
			town_growth_multiplier:		1.0;
			units_of_cargo:				TTD_STR_BAGS;
			items_of_cargo:				TTD_STR_QUANTITY_MAIL;
			penalty_lowerbound:			6;
			single_penalty_length:		24;
			station_list_colour:		15;
			cargo_payment_list_colour:	15;
			price_factor:				166;
			capacity_multiplier:		2;		
		}
	}

	// Original ID
	item (FEAT_CARGOS, cargo_oil, 0x03) {
		property {
			number:						0x03;
			sprite:						4300;
			type_name:					TTD_STR_CARGO_PLURAL_OIL;
			unit_name:					TTD_STR_CARGO_SINGULAR_OIL;
			type_abbreviation:			TTD_STR_ABBREV_OIL;
			weight:						0.9;
			is_freight:					1;
			cargo_classes:				bitmask(CC_LIQUID);
			cargo_label:				"OIL_";
			town_growth_effect:			TOWNGROWTH_NONE;
			town_growth_multiplier:		0;
			units_of_cargo:				TTD_STR_LITERS;
			items_of_cargo:				TTD_STR_QUANTITY_OIL;
			penalty_lowerbound:			30;
			single_penalty_length:		255;
			station_list_colour:		171;
			cargo_payment_list_colour:	171;
			price_factor:				72;
			capacity_multiplier:		1;		
		}
	}

	// Uses Livestock ID
	item (FEAT_CARGOS, cargo_lumber, 0x04) {
		property {
			number:						0x04;
			sprite:						4307;
			type_name:					string(STR_CARGO_NAME_LUMBER);
			unit_name:					string(STR_CARGO_NAME_LUMBER);
			type_abbreviation:			string(STR_CARGO_ABBREV_LUMBER);
			weight:						1;
			is_freight:					1;
			cargo_classes:				bitmask(CC_PIECE_GOODS);
			cargo_label:				"WDPR";
			town_growth_effect:			TOWNGROWTH_NONE;
			town_growth_multiplier:		1.0;
			units_of_cargo:				TTD_STR_TONS;
			items_of_cargo:				string(STR_CARGO_QUANTITY_LUMBER);
			penalty_lowerbound:			18;
			single_penalty_length:		255;
			station_list_colour:		58;
			cargo_payment_list_colour:	58;
			price_factor:				93;
			capacity_multiplier:		1;		
		}
	}

	// Original ID
	item (FEAT_CARGOS, cargo_goods, 0x05) {
		property {
			number:						0x05;
			sprite:						4302;
			type_name:					TTD_STR_CARGO_PLURAL_GOODS;
			unit_name:					TTD_STR_CARGO_SINGULAR_GOODS;
			type_abbreviation:			TTD_STR_ABBREV_GOODS;
			weight:						0.5;
			is_freight:					1;
			cargo_classes:				bitmask(CC_EXPRESS);
			cargo_label:				"GOOD";
			town_growth_effect:			TOWNGROWTH_WATER;
			town_growth_multiplier:		1.0;
			units_of_cargo:				TTD_STR_CRATES;
			items_of_cargo:				TTD_STR_QUANTITY_GOODS;
			penalty_lowerbound:			10;
			single_penalty_length:		64;
			station_list_colour:		187;
			cargo_payment_list_colour:	187;
			price_factor:				144;
			capacity_multiplier:		2;		
		}
	}

	// Uses Grain ID
	item (FEAT_CARGOS, cargo_chemicals, 0x06) {
		property {
			number:						0x06;
			sprite:						4314;
			type_name:					string(STR_CARGO_NAME_CHEMICALS);
			unit_name:					string(STR_CARGO_NAME_CHEMICALS);
			type_abbreviation:			string(STR_CARGO_ABBREV_CHEMICALS);
			weight:						1.2;
			is_freight:					1;
			cargo_classes:				bitmask(CC_LIQUID, CC_POWDERIZED);
			cargo_label:				"RFPR";
			town_growth_effect:			TOWNGROWTH_NONE;
			town_growth_multiplier:		1.0;
			units_of_cargo:				TTD_STR_LITERS;
			items_of_cargo:				string(STR_CARGO_QUANTITY_CHEMICALS);
			penalty_lowerbound:			20;
			single_penalty_length:		255;
			station_list_colour:		51;
			cargo_payment_list_colour:	51;
			price_factor:				126;
			capacity_multiplier:		1;		
		}
	}

	// Original ID
	item (FEAT_CARGOS, cargo_wood, 0x07) {
		property {
			number:						0x07;
			sprite:						4304;
			type_name:					TTD_STR_CARGO_PLURAL_WOOD;
			unit_name:					TTD_STR_CARGO_SINGULAR_WOOD;
			type_abbreviation:			TTD_STR_ABBREV_WOOD;
			weight:						1;
			is_freight:					1;
			cargo_classes:				bitmask(CC_PIECE_GOODS);
			cargo_label:				"WOOD";
			town_growth_effect:			TOWNGROWTH_NONE;
			town_growth_multiplier:		0;
			units_of_cargo:				TTD_STR_TONS;
			items_of_cargo:				TTD_STR_QUANTITY_WOOD;
			penalty_lowerbound:			24;
			single_penalty_length:		255;
			station_list_colour:		85;
			cargo_payment_list_colour:	85;
			price_factor:				50;
			capacity_multiplier:		1;		
		}
	}

	// Original ID
	item (FEAT_CARGOS, cargo_iore, 0x08) {
		property {
			number:						0x08;
			sprite:						4305;
			type_name:					TTD_STR_CARGO_PLURAL_IRON_ORE;
			unit_name:					TTD_STR_CARGO_SINGULAR_IRON_ORE;
			type_abbreviation:			TTD_STR_ABBREV_IRON_ORE;
			weight:						1;
			is_freight:					1;
			cargo_classes:				bitmask(CC_BULK);
			cargo_label:				"IORE";
			town_growth_effect:			TOWNGROWTH_NONE;
			town_growth_multiplier:		0;
			units_of_cargo:				TTD_STR_TONS;
			items_of_cargo:				TTD_STR_QUANTITY_IRON_ORE;
			penalty_lowerbound:			30;
			single_penalty_length:		255;
			station_list_colour:		126;
			cargo_payment_list_colour:	126;
			price_factor:				60;
			capacity_multiplier:		1;		
		}
	}

	// Original ID
	item (FEAT_CARGOS, cargo_steel, 0x09) {
		property {
			number:						0x09;
			sprite:						4306;
			type_name:					TTD_STR_CARGO_PLURAL_STEEL;
			unit_name:					TTD_STR_CARGO_SINGULAR_STEEL;
			type_abbreviation:			TTD_STR_ABBREV_STEEL;
			weight:						1;
			is_freight:					1;
			cargo_classes:				bitmask(CC_PIECE_GOODS);
			cargo_label:				"STEL";
			town_growth_effect:			TOWNGROWTH_NONE;
			town_growth_multiplier:		0;
			units_of_cargo:				TTD_STR_TONS;
			items_of_cargo:				TTD_STR_QUANTITY_STEEL;
			penalty_lowerbound:			14;
			single_penalty_length:		255;
			station_list_colour:		10;
			cargo_payment_list_colour:	10;
			price_factor:				110;
			capacity_multiplier:		1;		
		}
	}

	/* Recyclables enabled only if parameter is active. Check parameter only and rely on error message to catch a lack of compatible house sets. */
	if (param_recyclables == 1) {
		// Uses Valuables ID
		item (FEAT_CARGOS, cargo_recyclables, 0x0A) {
			property {
				number:						0x0A;
				sprite:						4319;
				type_name:					string(STR_CARGO_NAME_RECYCLABLES);
				unit_name:					string(STR_CARGO_NAME_RECYCLABLES);
				type_abbreviation:			string(STR_CARGO_ABBREV_RECYCLABLES);
				weight:						1.0;
				is_freight:					1;
				cargo_classes:				bitmask(CC_BULK, CC_PIECE_GOODS, CC_COVERED);
				cargo_label:				"RCYC";
				town_growth_effect:			TOWNGROWTH_NONE;
				town_growth_multiplier:		0;
				units_of_cargo:				TTD_STR_TONS;
				items_of_cargo:				string(STR_CARGO_QUANTITY_RECYCLABLES);
				penalty_lowerbound:			30;
				single_penalty_length:		255;
				station_list_colour:		165;
				cargo_payment_list_colour:	165;
				price_factor:				100;
				capacity_multiplier:		1;		
			}
		}
		
		// Uses Paper ID
		item (FEAT_CARGOS, cargo_waste, 0x0B) {
			property {
				number:						0x0B;
				sprite:						4309;
				type_name:					string(STR_CARGO_NAME_WASTE);
				unit_name:					string(STR_CARGO_NAME_WASTE);
				type_abbreviation:			string(STR_CARGO_ABBREV_WASTE);
				weight:						1.0;
				is_freight:					1;
				cargo_classes:				bitmask(CC_BULK, CC_PIECE_GOODS, CC_COVERED);
				cargo_label:				"WSTE";
				town_growth_effect:			TOWNGROWTH_NONE;
				town_growth_multiplier:		0;
				units_of_cargo:				TTD_STR_TONS;
				items_of_cargo:				string(STR_CARGO_QUANTITY_WASTE);
				penalty_lowerbound:			30;
				single_penalty_length:		255;
				station_list_colour:		87;
				cargo_payment_list_colour:	87;
				price_factor:				117;
				capacity_multiplier:		1;		
			}
		}
	}

	// Original ID, required for compatibility with older NewGRF house sets which hard-code cargo acceptance to cargo IDs rather than "FOOD"
	item (FEAT_CARGOS, cargo_food, 0x0C) {
		property {
			number:						0x0C;
			sprite:						4312;
			type_name:					TTD_STR_CARGO_PLURAL_FOOD;
			unit_name:					TTD_STR_CARGO_SINGULAR_FOOD;
			type_abbreviation:			TTD_STR_ABBREV_FOOD;
			weight:						1;
			is_freight:					1;
			cargo_classes:				bitmask(CC_REFRIGERATED, CC_EXPRESS);
			cargo_label:				"FOOD";
			town_growth_effect:			TOWNGROWTH_FOOD;
			town_growth_multiplier:		1.0;
			units_of_cargo:				TTD_STR_TONS;
			items_of_cargo:				TTD_STR_QUANTITY_FOOD;
			penalty_lowerbound:			0;
			single_penalty_length:		24;
			station_list_colour:		48;
			cargo_payment_list_colour:	48;
			price_factor:				158;
			capacity_multiplier:		1;		
		}
	}

	if (param_nuclear == 1) {
		// Uses Fruit ID
		item (FEAT_CARGOS, cargo_uranium, 0x0D) {
			property {
				number:						0x0D;
				sprite:						4320;
				type_name:					string(STR_CARGO_NAME_URANIUM);
				unit_name:					string(STR_CARGO_NAME_URANIUM);
				type_abbreviation:			string(STR_CARGO_ABBREV_URANIUM);
				weight:						1;
				is_freight:					1;
				cargo_classes:				bitmask(CC_PIECE_GOODS, CC_HAZARDOUS);
				cargo_label:				"URAN";
				town_growth_effect:			TOWNGROWTH_NONE;
				town_growth_multiplier:		0;
				units_of_cargo:				TTD_STR_TONS;
				items_of_cargo:				string(STR_CARGO_QUANTITY_URANIUM);
				penalty_lowerbound:			30;
				single_penalty_length:		255;
				station_list_colour:		102;
				cargo_payment_list_colour:	102;
				price_factor:				90;
				capacity_multiplier:		1;		
			}
		}

		// Uses Copper Ore ID
		item (FEAT_CARGOS, cargo_nuclear_fuel, 0x0E) {
			property {
				number:						0x0E;
				sprite:						4303;
				type_name:					string(STR_CARGO_NAME_NUCLEAR_FUEL);
				unit_name:					string(STR_CARGO_NAME_NUCLEAR_FUEL);
				type_abbreviation:			string(STR_CARGO_ABBREV_NUCLEAR_FUEL);
				weight:						1;
				is_freight:					1;
				cargo_classes:				bitmask(CC_PIECE_GOODS, CC_HAZARDOUS);
				cargo_label:				"NUKF";
				town_growth_effect:			TOWNGROWTH_NONE;
				town_growth_multiplier:		0;
				units_of_cargo:				TTD_STR_TONS;
				items_of_cargo:				string(STR_CARGO_QUANTITY_NUCLEAR_FUEL);
				penalty_lowerbound:			30;
				single_penalty_length:		255;
				station_list_colour:		39;
				cargo_payment_list_colour:	39;
				price_factor:				142;
				capacity_multiplier:		1;		
			}
		}

		// Uses Water ID
		item (FEAT_CARGOS, cargo_nuclear_waste, 0x0F) {
			property {
				number:						0x0F;
				sprite:						4316;
				type_name:					string(STR_CARGO_NAME_NUCLEAR_WASTE);
				unit_name:					string(STR_CARGO_NAME_NUCLEAR_WASTE);
				type_abbreviation:			string(STR_CARGO_ABBREV_NUCLEAR_WASTE);
				weight:						2;
				is_freight:					1;
				cargo_classes:				bitmask(CC_PIECE_GOODS, CC_HAZARDOUS);
				cargo_label:				"NUKW";
				town_growth_effect:			TOWNGROWTH_NONE;
				town_growth_multiplier:		0;
				units_of_cargo:				TTD_STR_TONS;
				items_of_cargo:				string(STR_CARGO_QUANTITY_NUCLEAR_WASTE);
				penalty_lowerbound:			10;
				single_penalty_length:		50;
				station_list_colour:		67;
				cargo_payment_list_colour:	67;
				price_factor:				180;
				capacity_multiplier:		0.5;		
			}
		}
	}
} // End Temperate cargos

/* *** End Cargos *** */


/* *** Begin Coal Mine *** */

spritelayout sprlay_coal_mine_1_a { // Hoist animation 1
	ground		{sprite:2022;}
	building	{sprite:2013; xoffset:7;}
}
spritelayout sprlay_coal_mine_1_b { // Hoist animation 2
	ground		{sprite:2022;}
	building	{sprite:2014; xoffset:7;}
}
spritelayout sprlay_coal_mine_1_c { // Hoist animation 3
	ground		{sprite:2022;}
	building	{sprite:2015; xoffset:7;}
}

spritelayout sprlay_coal_mine_2 { // Long building
	ground		{sprite:2022;}
	building	{sprite:2018;}
}

spritelayout sprlay_coal_mine_3 { // Elevated building
	ground		{sprite:2022;}
	building	{sprite:2021;}
}

spritelayout sprlay_coal_mine_4 { // Single tile coal pile
	ground		{sprite:2022;}
	building	{sprite:2025;}
}

spritelayout sprlay_coal_mine_5_N { // Coal pile N
	ground		{sprite:2022;}
	building	{sprite:2023;}
}

spritelayout sprlay_coal_mine_5_W { // Coal pile W
	ground		{sprite:2022;}
	building	{sprite:2024;}
}

spritelayout sprlay_coal_mine_6 {
	ground		{sprite:2022;}
}

switch (FEAT_INDUSTRYTILES, PARENT, switch_coal_mine_animation_2, this_month_transported("COAL") > 0) {1: return CB_RESULT_START_ANIMATION; return CB_RESULT_STOP_ANIMATION;}

switch (FEAT_INDUSTRYTILES, SELF, switch_coal_mine_animation_1, animation_frame) {
	0:	sprlay_coal_mine_1_a;
	1:	sprlay_coal_mine_1_b;
	2:	sprlay_coal_mine_1_c;
}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_1) { // hoist
property {
	substitute:				02; 
	accepted_cargos: 		[[PASS, 8]];
	animation_info:			[ANIMATION_LOOPING, 3];
	animation_speed:		2;
	animation_triggers:		bitmask(ANIM_TRIGGER_INDTILE_DISTRIBUTES_CARGO, ANIM_TRIGGER_INDTILE_INDUSTRY_LOOP);
}
graphics {
	default:				switch_coal_mine_animation_1;
	anim_control:		switch_coal_mine_animation_2;
}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_2) { // long building
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_3) { // elevated building
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_4) { // single tile coal pile
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_4;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_5_N) { // large coal pile N
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_5_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_5_W) { // large coal pile W
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_5_W;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_6) { // blank tile
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_6;}}

tilelayout industry_layout_coal_mine {
	0,0:	ind_tile_coal_mine_1;	0,1:	ind_tile_coal_mine_2;	0,2:	ind_tile_coal_mine_5_N;
	1,0:	ind_tile_coal_mine_4;	1,1:	ind_tile_coal_mine_3;	1,2:	ind_tile_coal_mine_5_W;
}

tilelayout industry_layout_coal_mine_2 {
	0,0:	ind_tile_coal_mine_1;	0,1:	ind_tile_coal_mine_3;	0,2:	ind_tile_coal_mine_2;
	1,0:	ind_tile_coal_mine_4;	1,1:	ind_tile_coal_mine_4;	1,2:	ind_tile_coal_mine_3;
}

tilelayout industry_layout_coal_mine_3 {
	0,0:	ind_tile_coal_mine_2;	0,1:	ind_tile_coal_mine_1;	0,2:	ind_tile_coal_mine_3;
	1,0:	ind_tile_coal_mine_6;	1,1:	ind_tile_coal_mine_4;
}
	

/* Coal Mine Industry */

switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_location_check_1, nearby_tile_height(0,0) < 4 && param_elevation_checks == 1) {1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW;} 
	// Coal mines must be built at tile height 2 or above.

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_coal_mine_location_check_1;}

item (FEAT_INDUSTRIES, industry_coal_mine, 1) {
	property {
		substitute:				INDUSTRYTYPE_COAL_MINE;
		life_type:				IND_LIFE_TYPE_EXTRACTIVE;
		cargo_types:			[
								produce_cargo("COAL",15),
								produce_cargo("PASS",15),
		];
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_COAL_MINE));
		fund_cost_multiplier:	85;
		layouts:				[
			industry_layout_coal_mine,
			industry_layout_coal_mine_2,
			industry_layout_coal_mine_3,
		];
		conflicting_ind_types:	[industry_steel_mill, industry_power_plant, industry_farm];
	}
	graphics {
		location_check:			switch_coal_mine_allow_funded;
		construction_probability:	15;
	}
}


switch (FEAT_OBJECTS, SELF, switch_object_graphics_coal_mine_5, relative_pos) {
	relative_coord(0, 0): sprlay_coal_mine_5_N;
	relative_coord(1, 0): sprlay_coal_mine_5_W;
}

item (FEAT_OBJECTS, object_item_coal_mine_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_1_a;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_2;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_3;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_4;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				switch_object_graphics_coal_mine_5;
	}
}

/* *** End Coal Mine *** */

/* *** Begin Factory ** */

spritelayout sprlay_factory_1_N {
	ground		{sprite:2146;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2150;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_E {
	ground		{sprite:2147;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2151;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_W {
	ground		{sprite:2148;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2152;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_S {
	ground		{sprite:2149;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

item (FEAT_INDUSTRYTILES, ind_tile_factory_1_N) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_factory_1_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_E) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_factory_1_E;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_W) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_factory_1_W;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_S) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_factory_1_S;
	}
}

tilelayout industry_layout_factory_1x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x1 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	2,2:	ind_tile_factory_1_N;
	2,3:	ind_tile_factory_1_E;
	3,2:	ind_tile_factory_1_W;
	3,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_3x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	2,2:	ind_tile_factory_1_N;
	2,3:	ind_tile_factory_1_E;
	3,2:	ind_tile_factory_1_W;
	3,3:	ind_tile_factory_1_S;
	
	4,0:	ind_tile_factory_1_N;
	4,1:	ind_tile_factory_1_E;
	5,0:	ind_tile_factory_1_W;
	5,1:	ind_tile_factory_1_S;
	
	4,2:	ind_tile_factory_1_N;
	4,3:	ind_tile_factory_1_E;
	5,2:	ind_tile_factory_1_W;
	5,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_C {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	

	
	4,0:	ind_tile_factory_1_N;
	4,1:	ind_tile_factory_1_E;
	5,0:	ind_tile_factory_1_W;
	5,1:	ind_tile_factory_1_S;
	
	4,2:	ind_tile_factory_1_N;
	4,3:	ind_tile_factory_1_E;
	5,2:	ind_tile_factory_1_W;
	5,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_L {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	
	4,0:	ind_tile_factory_1_N;
	4,1:	ind_tile_factory_1_E;
	5,0:	ind_tile_factory_1_W;
	5,1:	ind_tile_factory_1_S;
	
}

/* Industry Construction Switches - Read from bottom to top */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_factory_distance_competitor, industry_distance(industry_factory, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_factory_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_factory_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_factory_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_factory_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_factory_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_factory_town_distance_check_2;} 
	// Add up the town zone radii and store it in temporary register 0


// If "Generate primary only" parameter enabled, disallow random generation of secondary industries
switch (FEAT_INDUSTRIES, SELF, switch_factory_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_factory_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_factory_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_factory_town_distance_check_1; switch_factory_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_factory_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_factory_allow_prospected;}

item (FEAT_INDUSTRIES, industry_factory, 5) {
	property {
		substitute:				INDUSTRYTYPE_TEMPERATE_FACTORY;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("STEL", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("WDPR", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("RFPR", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("FOOD", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("RCYC", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
		];
		name:					TTD_STR_INDUSTRY_NAME_FACTORY;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FACTORY));
		fund_cost_multiplier:	40;
		layouts:				[
				industry_layout_factory_2x2, 
				industry_layout_factory_1x2, 
				industry_layout_factory_2x1,
				industry_layout_factory_3x2,
				industry_layout_factory_C,
				industry_layout_factory_L,
			];
		conflicting_ind_types:	[industry_farm];
	}
	graphics {
		location_check:			switch_factory_allow_funded;
		colour:					COLOUR_PALE_GREEN;
		construction_probability:	(current_year >= 1800) ? 9 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1800");
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_factory_1, relative_pos) {
	relative_coord(0, 0): sprlay_factory_1_N;
	relative_coord(0, 1): sprlay_factory_1_E;
	relative_coord(1, 0): sprlay_factory_1_W;
    relative_coord(1, 1): sprlay_factory_1_S;
}

item (FEAT_OBJECTS, object_item_factory_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FACTORY;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1800;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_factory_1;
		colour:					COLOUR_PALE_GREEN;
	}
}

/* *** End Factory *** */

/* *** Begin Farm *** */

spritelayout sprlay_farm_1_N { // Farmhouse N
	ground		{sprite:2106;}
	building	{sprite:2108;}
}

spritelayout sprlay_farm_1_E { // Farmhouse W
	ground		{sprite:2107;}
	building	{sprite:2109;}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_farm_1, relative_pos) {
	relative_coord(0, 0): sprlay_farm_1_N;
	relative_coord(0, 1): sprlay_farm_1_E;
}

spritelayout sprlay_farm_2 { // Hay shed
	ground		{sprite:2110;}
	building	{sprite:2111;}
}

spritelayout sprlay_farm_3 { // Barn
	ground		{sprite:2112;}
	building	{sprite:2113;}
}

spritelayout sprlay_farm_4 { // Silos
	ground		{sprite:2116;}
	building	{sprite:2115;}
}

spritelayout sprlay_farm_5 { // Farmyard
	ground		{sprite:2116;}
	building	{sprite:2117;}
}

spritelayout sprlay_farm_6 { // Empty tile
	ground		{sprite:2116;}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_1_N) { // House north
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_1_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_1_E) { // House east
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_1_E;}}
 
item (FEAT_INDUSTRYTILES, ind_tile_farm_2) { // Hay shed
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_3) { // Barn
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_4) { // Silos
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_4;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_5) { // Farmyard
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_5;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_6) { // empty tile
property {substitute:	02;}
graphics {default:		sprlay_farm_6;}}

tilelayout industry_layout_farm_1 {
	0,0:	ind_tile_farm_4;	0,1:	ind_tile_farm_3;	0,2:	ind_tile_farm_2;
	1,0:	ind_tile_farm_1_N;	1,1:	ind_tile_farm_1_E;	1,2:	ind_tile_farm_6;
}
tilelayout industry_layout_farm_2 {
	0,0:	ind_tile_farm_5;	0,1:	ind_tile_farm_4;	0,2:	ind_tile_farm_2;
	1,0:	ind_tile_farm_3;	1,1:	ind_tile_farm_1_N;	1,2:	ind_tile_farm_1_E;
}
tilelayout industry_layout_farm_3 {
	0,0:	ind_tile_farm_5;	0,1:	ind_tile_farm_1_N;	0,2:	ind_tile_farm_1_E;
	1,0:	ind_tile_farm_5;	1,1:	ind_tile_farm_3;	1,2:	ind_tile_farm_4;
}
tilelayout industry_layout_farm_4 {
	0,0:	ind_tile_farm_1_N;	0,1:	ind_tile_farm_1_E;	0,2:	ind_tile_farm_2;
	1,0:	ind_tile_farm_3;	1,1:	ind_tile_farm_6;	1,2:	ind_tile_farm_5;
}
tilelayout industry_layout_farm_5 {
	0,0:	ind_tile_farm_1_N;	0,1:	ind_tile_farm_1_E;	0,2:	ind_tile_farm_4;
	1,0:	ind_tile_farm_3;	1,1:	ind_tile_farm_6;	1,2:	ind_tile_farm_2;
}
tilelayout industry_layout_farm_6 {
	0,0:	ind_tile_farm_1_N;	0,1:	ind_tile_farm_1_E;	0,2:	ind_tile_farm_5;
	1,0:	ind_tile_farm_2;	1,1:	ind_tile_farm_6;	1,2:	ind_tile_farm_5;
}
tilelayout industry_layout_farm_7 {
	0,0:	ind_tile_farm_3;	0,1:	ind_tile_farm_6;	0,2:	ind_tile_farm_5;
	1,0:	ind_tile_farm_1_N;	1,1:	ind_tile_farm_1_E;	1,2:	ind_tile_farm_2;
}


/* Industry construction checks - specific to Farms */

/* Keep Farms from building too close to other industries (fields would overlap) */
switch (FEAT_INDUSTRIES, SELF, switch_farm_location_check_5, 
	industry_distance(industry_coal_mine,-1) >= 30 &&
	industry_distance(industry_factory,-1) >= 30 && 
	industry_distance(industry_farm,-1) >= 40 && 
	industry_distance(industry_forest,-1) >= 30 &&
	industry_distance(industry_iron_mine,-1) >= 30 && 
	industry_distance(industry_nuclear_fuel_plant,-1) >= 30 &&
	industry_distance(industry_power_plant,-1) >= 30 &&
	industry_distance(industry_oil_refinery,-1) >= 30 && 
	industry_distance(industry_oil_wells,-1) >= 30 && 
	industry_distance(industry_paper_mill,-1) >= 30 && 
	industry_distance(industry_recycling_center,-1) >= 30 &&
	industry_distance(industry_sawmill,-1) >= 30 && 
	industry_distance(industry_steel_mill,-1) >= 30 && 
	industry_distance(industry_uranium_mine,-1) >= 30
	) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}
		
switch (FEAT_INDUSTRIES, SELF, switch_farm_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+100) {1: switch_farm_location_check_5; return CB_RESULT_LOCATION_DISALLOW;} // Add 10 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_farm_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_farm_location_check_3;} // Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_farm_location_check_1, nearby_tile_height(0,0) > 2 && param_elevation_checks == 1) {1: return CB_RESULT_LOCATION_DISALLOW; switch_farm_location_check_2;} // Farms must be built at tile height 2 or below.


/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_farm_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_farm_location_check_1;}

/*
*	Parameter selects whether Farms build fields automatically
*	Uses if/then and otherwise-identical industry blocks, since special flags cannot be assigned to a parameter.
*/

if(param_auto_farm_fields == 1) { 
	item (FEAT_INDUSTRIES, industry_farm, 0) {
		property {
			substitute:				INDUSTRYTYPE_TEMPERATE_ARCTIC_FARM;
			life_type:				IND_LIFE_TYPE_ORGANIC;
			spec_flags:				bitmask(IND_FLAG_PLANT_FIELDS_WHEN_BUILT, IND_FLAG_PLANT_FIELDS_PERIODICALLY);
			cargo_types:			[
									produce_cargo("FOOD",12),
									accept_cargo("RFPR", produce_cargo("FOOD",1)),
									accept_cargo("RCYC", produce_cargo("FOOD",1)),
									accept_cargo("WSTE", produce_cargo("FOOD",0.25)),
			];
			name:					TTD_STR_INDUSTRY_NAME_FARM;
			nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FARM));
			fund_cost_multiplier:	70;
			layouts:				[
				industry_layout_farm_1,
				industry_layout_farm_2,
				industry_layout_farm_3,
				industry_layout_farm_4,
				industry_layout_farm_5,
				industry_layout_farm_6,
				industry_layout_farm_7,
			];
		}
		graphics {
			location_check:			switch_farm_allow_funded;
			construction_probability:	15;
		}
	} 
} else {
item (FEAT_INDUSTRIES, industry_farm, 0) {
		property {
			substitute:				INDUSTRYTYPE_TEMPERATE_ARCTIC_FARM;
			life_type:				IND_LIFE_TYPE_ORGANIC;
			spec_flags:				0; //Farms inherit info from base game farms, so it's necessary to set spec_flags to 0.
			cargo_types:			[
									produce_cargo("FOOD",12),
									accept_cargo("RFPR", produce_cargo("FOOD",1)),
									accept_cargo("RCYC", produce_cargo("FOOD",1)),
									accept_cargo("WSTE", produce_cargo("FOOD",0.25)),
			];
			name:					TTD_STR_INDUSTRY_NAME_FARM;
			nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FARM));
			fund_cost_multiplier:	100;
			layouts:				[
				industry_layout_farm_1,
				industry_layout_farm_2,
				industry_layout_farm_3,
				industry_layout_farm_4,
				industry_layout_farm_5,
				industry_layout_farm_6,
				industry_layout_farm_7,
			];
		}
		graphics {
			location_check:			switch_farm_allow_funded;
			construction_probability:	18;
		}
	}
}

/* Building objects */

item (FEAT_OBJECTS, object_item_farm_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,2];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_farm_1;
	}
}

item (FEAT_OBJECTS, object_item_farm_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_2;
	}
}

item (FEAT_OBJECTS, object_item_farm_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_3;
	}
}

item (FEAT_OBJECTS, object_item_farm_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_4;
	}
}

item (FEAT_OBJECTS, object_item_farm_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_5;
	}
}

item (FEAT_OBJECTS, object_item_farm_6) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_6;
	}
}

/* Field objects */

/* Autoslope Fields */

/* Field 1 */

spritelayout sprlay_farm_field_1 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4126 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_1_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_1;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_1) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_1_autoslope;
		purchase:				sprlay_farm_field_1;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* Field 2 */

spritelayout sprlay_farm_field_2 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4145 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_2_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_2;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_2) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_2_autoslope;
		purchase:				sprlay_farm_field_2;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}



spritelayout sprlay_farm_field_3 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4164 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_3_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_3;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_3) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_3_autoslope;
		purchase:				sprlay_farm_field_3;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* Field 4 */

spritelayout sprlay_farm_field_4 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4183 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_4_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_4;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_4) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_4_autoslope;
		purchase:				sprlay_farm_field_4;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* Field 5 */

spritelayout sprlay_farm_field_5 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4202 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_5_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_5;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_5) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_5_autoslope;
		purchase:				sprlay_farm_field_5;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* Field 6 */

spritelayout sprlay_farm_field_6 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4221 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_6_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_6;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_6) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_6_autoslope;
		purchase:				sprlay_farm_field_6;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* Field 7 */

spritelayout sprlay_farm_field_7 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4240 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_7_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_7;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_7) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_7_autoslope;
		purchase:				sprlay_farm_field_7;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* Field 8 */

spritelayout sprlay_farm_field_8 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4259 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_8_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_8;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_8) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_8_autoslope;
		purchase:				sprlay_farm_field_8;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* Field 9 */

spritelayout sprlay_farm_field_9 {
 	ground {
 		// normal ground sprite - always draw
 		sprite: 4278 + LOAD_TEMP(0);
 	}
 }

switch (FEAT_OBJECTS, SELF, switch_farm_field_9_autoslope, [
 	STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
	]) {
		sprlay_farm_field_9;
 }
 
 item (FEAT_OBJECTS, object_item_farm_field_9) {
	property {
		class:					"HSFA";
		classname:				string(STR_NAME_OBJECT_MENU_FIELDS);
		name:					string(STR_NAME_FIELD_1);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_NO_FOUNDATIONS, OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_farm_field_9_autoslope;
		purchase:				sprlay_farm_field_9;
		tile_check:				CB_RESULT_LOCATION_ALLOW;
	}
}

/* *** End Farm *** */


/* *** Begin Forest *** */

spritelayout sprlay_forest_grow_1 {
	ground		{sprite:GROUNDSPRITE_NORMAL;}
	building	{sprite:2072;}
}

spritelayout sprlay_forest_grow_2 {
	ground		{sprite:GROUNDSPRITE_NORMAL;}
	building	{sprite:2073;}
}

spritelayout sprlay_forest_grow_3 {
	ground		{sprite:GROUNDSPRITE_NORMAL;}
	building	{sprite:2074;}
}

spritelayout sprlay_forest_grown {
	ground		{sprite:GROUNDSPRITE_NORMAL;}
	building	{sprite:2075;}
}

spritelayout sprlay_forest_cut {
	ground		{sprite:GROUNDSPRITE_NORMAL;}
	building	{sprite:2076;}
}


/* Location checks - specific to forest */ 
switch (FEAT_INDUSTRIES, SELF, switch_forest_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+400) {1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;} // Add 20 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_forest_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_forest_location_check_3;} // Add up the town zone radii and store it in temporary register 0


/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_forest_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_forest_location_check_2;}

item (FEAT_INDUSTRIES, industry_forest, 11) {
	property {
		substitute:				INDUSTRYTYPE_FOREST;
		life_type:				IND_LIFE_TYPE_ORGANIC;
		cargo_types:			[produce_cargo("WOOD",13),];
		name:					TTD_STR_INDUSTRY_NAME_FOREST;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FOREST));
		fund_cost_multiplier:	62;
		conflicting_ind_types:	[industry_sawmill, industry_paper_mill, industry_farm];
	}
	graphics {
		location_check:			switch_forest_allow_funded;
		construction_probability:	15;
	}
}

/* Forest objects */

item (FEAT_OBJECTS, object_item_forest_grow_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FOREST;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_forest_grow_1;
	}
}

item (FEAT_OBJECTS, object_item_forest_grow_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FOREST;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_forest_grow_2;
	}
}

item (FEAT_OBJECTS, object_item_forest_grow_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FOREST;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_forest_grow_3;
	}
}

item (FEAT_OBJECTS, object_item_forest_grown) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FOREST;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_forest_grown;
	}
}

item (FEAT_OBJECTS, object_item_forest_cut) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FOREST;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_forest_cut;
	}
}


/* *** End Forest *** */


/* *** Begin Iron Mine *** */

spritelayout sprlay_iron_mine_00 {ground{sprite:2325;}}
spritelayout sprlay_iron_mine_01 {ground{sprite:2326;}}
spritelayout sprlay_iron_mine_02 {ground{sprite:2327;}}
spritelayout sprlay_iron_mine_03 {ground{sprite:2328;}}

spritelayout sprlay_iron_mine_10 {ground{sprite:2329;}}
spritelayout sprlay_iron_mine_11 {ground{sprite:2330;}}
spritelayout sprlay_iron_mine_12 {ground{sprite:2331;}}
spritelayout sprlay_iron_mine_13 {ground{sprite:2332;}}

spritelayout sprlay_iron_mine_20 {ground{sprite:2333;}}
spritelayout sprlay_iron_mine_21 {ground{sprite:2334;}}
spritelayout sprlay_iron_mine_22 {ground{sprite:2335;}}
spritelayout sprlay_iron_mine_23 {ground{sprite:2336;}}

spritelayout sprlay_iron_mine_30 {ground{sprite:2337;}}
spritelayout sprlay_iron_mine_31 {ground{sprite:2338;}}
spritelayout sprlay_iron_mine_32 {ground{sprite:2339;}}
spritelayout sprlay_iron_mine_33 {ground{sprite:2340;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_00) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_00;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_01) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_01;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_02) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_02;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_03) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_03;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_10) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_10;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_11) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_11;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_12) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_12;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_13) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_13;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_20) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_20;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_21) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_21;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_22) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_22;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_23) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_23;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_30) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_30;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_31) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_31;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_32) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_32;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_33) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_33;}}

tilelayout industry_layout_iron_mine {
	0,0:	ind_tile_iron_mine_00;	0,1:	ind_tile_iron_mine_01;	0,2:	ind_tile_iron_mine_02;	0,3:	ind_tile_iron_mine_03;
	1,0:	ind_tile_iron_mine_10;	1,1:	ind_tile_iron_mine_11;	1,2:	ind_tile_iron_mine_12;	1,3:	ind_tile_iron_mine_13;
	2,0:	ind_tile_iron_mine_20;	2,1:	ind_tile_iron_mine_21;	2,2:	ind_tile_iron_mine_22;	2,3:	ind_tile_iron_mine_23;
	3,0:	ind_tile_iron_mine_30;	3,1:	ind_tile_iron_mine_31;	3,2:	ind_tile_iron_mine_32;	3,3:	ind_tile_iron_mine_33;
}

item (FEAT_INDUSTRIES, industry_iron_mine, 3) {
	property {
		substitute:				INDUSTRYTYPE_IRON_ORE_MINE;
		life_type:				IND_LIFE_TYPE_EXTRACTIVE;
		spec_flags:				0;
		cargo_types:			[
								produce_cargo("IORE",15),
								produce_cargo("PASS",8),
		];
		name:					TTD_STR_INDUSTRY_NAME_IRON_ORE_MINE;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_IRON_MINE));
		fund_cost_multiplier:	75;
		layouts:				[industry_layout_iron_mine,];
		conflicting_ind_types:	[industry_steel_mill, industry_farm];
	}
	graphics {
		construction_probability:	(current_year >= 1856) ? 15 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1856");
	}
}

/* Iron Mine Objects */

switch (FEAT_OBJECTS, SELF, switch_object_graphics_iron_mine, relative_pos) {
	relative_coord(0,0): sprlay_iron_mine_00;
	relative_coord(0,1): sprlay_iron_mine_01;
	relative_coord(0,2): sprlay_iron_mine_02;
	relative_coord(0,3): sprlay_iron_mine_03;
	
	relative_coord(1,0): sprlay_iron_mine_10;
	relative_coord(1,1): sprlay_iron_mine_11;
	relative_coord(1,2): sprlay_iron_mine_12;
	relative_coord(1,3): sprlay_iron_mine_13;
	
	relative_coord(2,0): sprlay_iron_mine_20;
	relative_coord(2,1): sprlay_iron_mine_21;
	relative_coord(2,2): sprlay_iron_mine_22;
	relative_coord(2,3): sprlay_iron_mine_23;
	
	relative_coord(3,0): sprlay_iron_mine_30;
	relative_coord(3,1): sprlay_iron_mine_31;
	relative_coord(3,2): sprlay_iron_mine_32;
	relative_coord(3,3): sprlay_iron_mine_33;
}

item (FEAT_OBJECTS, object_item_iron_mine) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_IRON_ORE_MINE;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[4,4];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_iron_mine;
	}
}

/* *** End Iron Mine *** */


/* *** Begin Nuclear Fuel Plant *** */

spritelayout sprlay_nuclear_fuel_plant_yard { // Empty yard
	ground		{sprite:1420;}
	building	{sprite:2212;}
}

spritelayout sprlay_nuclear_fuel_plant_closed { // Tall building closed
	ground		{sprite:1420;}
	building	{sprite:2205;}
}

spritelayout sprlay_nuclear_fuel_plant_open { // Tall building open
	ground		{sprite:1420;}
	building	{sprite:2206;}
}

spritelayout sprlay_nuclear_fuel_plant_stack { // Smokestack building empty yard
	ground		{sprite:1420;}
	building	{sprite:2208;}
}

spritelayout sprlay_nuclear_fuel_plant_canopy { // Canopy
	ground		{sprite:1420;}
	building	{sprite:2214; xoffset:-3; yoffset:-3;}
}

spritelayout sprlay_nuclear_fuel_plant_mill { // Mill building
	ground		{sprite:1420;}
	building	{sprite:2202;}
}

item (FEAT_INDUSTRYTILES, ind_tile_nuclear_fuel_plant_yard) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos:		[[PASS, 8]];
	}
	graphics {
		default:			sprlay_nuclear_fuel_plant_yard;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_nuclear_fuel_plant_closed) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos:		[[PASS, 8]];
	}
	graphics {
		default:			sprlay_nuclear_fuel_plant_closed;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_nuclear_fuel_plant_open) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos:		[[PASS, 8]];
	}
	graphics {
		default:			sprlay_nuclear_fuel_plant_open;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_nuclear_fuel_plant_stack) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos:		[[PASS, 8]];
	}
	graphics {
		default:			sprlay_nuclear_fuel_plant_stack;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_nuclear_fuel_plant_canopy) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos:		[[PASS, 8]];
	}
	graphics {
		default:			sprlay_nuclear_fuel_plant_canopy;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_nuclear_fuel_plant_mill) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos:		[[PASS, 8]];
	}
	graphics {
		default:			sprlay_nuclear_fuel_plant_mill;
	}
}

tilelayout industry_layout_nuclear_fuel_plant_1 {
	0,0:	ind_tile_nuclear_fuel_plant_stack;		0,1:	ind_tile_nuclear_fuel_plant_open;	0,2:	ind_tile_nuclear_fuel_plant_open;
	1,0:	ind_tile_nuclear_fuel_plant_mill;		1,1:	ind_tile_nuclear_fuel_plant_open;	1,2:	ind_tile_nuclear_fuel_plant_open;
	2,0:	ind_tile_nuclear_fuel_plant_closed;		2,1:	ind_tile_nuclear_fuel_plant_canopy;	2,2:	ind_tile_nuclear_fuel_plant_closed;
}


/* Industry Construction Switches - Read from bottom to top */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_nuclear_fuel_plant_distance_competitor, industry_distance(industry_nuclear_fuel_plant, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_nuclear_fuel_plant_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_nuclear_fuel_plant_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_nuclear_fuel_plant_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_nuclear_fuel_plant_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_nuclear_fuel_plant_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_nuclear_fuel_plant_town_distance_check_2;} 
	// Add up the town zone radii and store it in temporary register 0


/* If "Generate primary only" parameter enabled, disallow random generation of secondary industries */
switch (FEAT_INDUSTRIES, SELF, switch_nuclear_fuel_plant_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_nuclear_fuel_plant_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_nuclear_fuel_plant_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_nuclear_fuel_plant_town_distance_check_1; switch_nuclear_fuel_plant_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_nuclear_fuel_plant_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_nuclear_fuel_plant_allow_prospected;}

if (param_nuclear == 1) {
	item (FEAT_INDUSTRIES, industry_nuclear_fuel_plant, 14) {
		property {
			substitute:				INDUSTRYTYPE_PAPER_MILL;
			life_type:				IND_LIFE_TYPE_PROCESSING;
			spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
			cargo_types:			[
				accept_cargo("URAN", produce_cargo("NUKF",0.5), produce_cargo("PASS",0.25)),
				accept_cargo("NUKW", produce_cargo("NUKF",0.75), produce_cargo("PASS",2)),
			];
			name:					string(STR_NAME_NUCLEAR_FUEL_PLANT);
			nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_NUCLEAR_FUEL_PLANT));
			fund_cost_multiplier:	255;
			map_colour: 			39;
			layouts: [
				industry_layout_nuclear_fuel_plant_1,
			];
			conflicting_ind_types:	[industry_uranium_mine, industry_power_plant, industry_farm];
		}
		graphics {
			location_check:			switch_nuclear_fuel_plant_allow_funded;
			construction_probability:	(current_year >= 1956) ? 1 : 0;
			extra_text_fund:			string(STR_FUND_AVAILABLE, "1956");
		}
	}

	/* Objects */

	item (FEAT_OBJECTS, object_item_nuclear_fuel_plant_yard) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_NUCLEAR_FUEL_PLANT);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1956;
			num_views:				1;
		}
		graphics {
			default:				sprlay_nuclear_fuel_plant_yard;
		}
	}

	item (FEAT_OBJECTS, object_item_nuclear_fuel_plant_closed) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_NUCLEAR_FUEL_PLANT);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1956;
			num_views:				1;
		}
		graphics {
			default:				sprlay_nuclear_fuel_plant_closed;
		}
	}

	item (FEAT_OBJECTS, object_item_nuclear_fuel_plant_open) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_NUCLEAR_FUEL_PLANT);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1956;
			num_views:				1;
		}
		graphics {
			default:				sprlay_nuclear_fuel_plant_open;
		}
	}

	item (FEAT_OBJECTS, object_item_nuclear_fuel_plant_stack) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_NUCLEAR_FUEL_PLANT);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1956;
			num_views:				1;
		}
		graphics {
			default:				sprlay_nuclear_fuel_plant_stack;
		}
	}

	item (FEAT_OBJECTS, object_item_nuclear_fuel_plant_canopy) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_NUCLEAR_FUEL_PLANT);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1956;
			num_views:				1;
		}
		graphics {
			default:				sprlay_nuclear_fuel_plant_canopy;
		}
	}

	item (FEAT_OBJECTS, object_item_nuclear_fuel_plant_mill) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_NUCLEAR_FUEL_PLANT);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1956;
			num_views:				1;
		}
		graphics {
			default:				sprlay_nuclear_fuel_plant_mill;
		}
	}
}

/* *** End Nuclear Fuel Plant *** */

/* *** Begin Oil Refinery *** */

spritelayout sprlay_oil_refinery_1 { // Office
	ground		{sprite:1420;}
	building	{sprite:2095; yoffset:2; xoffset:2;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_2 { // Large tank
	ground		{sprite:1420;}
	building	{sprite:2080; yoffset:1; xoffset:1;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_3 { // Tall tank
	ground		{sprite:1420;}
	building	{sprite:2083; yoffset:4; xoffset:4;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_4 { // Burner tower
	ground		{sprite:1420;}
	building	{sprite:2086; yoffset:5; xoffset:5;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_5 { // Pipe frame red
	ground		{sprite:1420;}
	building	{sprite:2089;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_6 { // Pipe frame 2
	ground		{sprite:1420;}
	building	{sprite:2092;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_7 { // Pipe frame 3
	ground		{sprite:1420;}
	building	{sprite:2091;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_8 { // Bare ground
	ground		{sprite:1420;}
}
spritelayout sprlay_oil_refinery_9 { // Food silo
	ground		{sprite:1420;}
	building	{sprite:2196;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_oil_refinery_10 { // Pumps with boxes
	ground		{sprite:1420;}
	building	{sprite:2349;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_oil_refinery_11 { // Pumps with reflector
	ground		{sprite:1420;}
	building	{sprite:2352;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_1) { // Office
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_1;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_2) { // Large tank
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_2;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_3) { // Tall tank
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_3;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_4) { // Burner tower
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_4;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_5) { // Pipe frame red
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_5;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_6) { // Pipe frame 2
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_6;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_7) { // Pipe frame 3
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_7;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_8) { // Bare ground
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_8;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_9) { // Food silo
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_9;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_10) { // Pumps with boxes
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_10;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_11) { // Pump with reflector
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_11;}
}

tilelayout industry_layout_oil_refinery_1 {
0,0:	ind_tile_oil_refinery_2;	0,1:	ind_tile_oil_refinery_10;	0,2: 	ind_tile_oil_refinery_5;	0,3:	ind_tile_oil_refinery_6;	0,4:	ind_tile_oil_refinery_7;
1,0:	ind_tile_oil_refinery_2;	1,1:	ind_tile_oil_refinery_1;	1,2:	ind_tile_oil_refinery_5;	1,3:	ind_tile_oil_refinery_6;	1,4:	ind_tile_oil_refinery_7;

3,0:	ind_tile_oil_refinery_3;	3,1:	ind_tile_oil_refinery_6;	3,2:	ind_tile_oil_refinery_4;	3,3:	ind_tile_oil_refinery_11;	3,4:	ind_tile_oil_refinery_10;
4,0:	ind_tile_oil_refinery_3;	4,1:	ind_tile_oil_refinery_5;	4,2:	ind_tile_oil_refinery_7;	4,3:	ind_tile_oil_refinery_11;	4,4:	ind_tile_oil_refinery_10;

6,0:	ind_tile_oil_refinery_2;	6,1:	ind_tile_oil_refinery_2;	6,2:	ind_tile_oil_refinery_2;	6,3:	ind_tile_oil_refinery_2;	6,4:	ind_tile_oil_refinery_1;
7,0:	ind_tile_oil_refinery_2;	7,1:	ind_tile_oil_refinery_2;	7,2:	ind_tile_oil_refinery_2;	7,3:	ind_tile_oil_refinery_2;	7,4:	ind_tile_oil_refinery_2;
}

tilelayout industry_layout_oil_refinery_2 {
0,0:	ind_tile_oil_refinery_5;	0,1:	ind_tile_oil_refinery_2;	0,2:	ind_tile_oil_refinery_10;	0,3:	ind_tile_oil_refinery_11;	0,4:	ind_tile_oil_refinery_6;
1,0:	ind_tile_oil_refinery_5;	1,1:	ind_tile_oil_refinery_2;	1,2:	ind_tile_oil_refinery_1;	1,3:	ind_tile_oil_refinery_8;	1,4:	ind_tile_oil_refinery_3;
2,0:	ind_tile_oil_refinery_5;	2,1:	ind_tile_oil_refinery_4;	2,2:	ind_tile_oil_refinery_7;	2,3:	ind_tile_oil_refinery_8;	2,4:	ind_tile_oil_refinery_9;
3,0:	ind_tile_oil_refinery_3;	3,1:	ind_tile_oil_refinery_6;	3,2:	ind_tile_oil_refinery_1;	3,3:	ind_tile_oil_refinery_2;	3,4:	ind_tile_oil_refinery_2;
4,0:	ind_tile_oil_refinery_9;	4,1:	ind_tile_oil_refinery_8;	4,2:	ind_tile_oil_refinery_11;	4,3:	ind_tile_oil_refinery_2;	4,4:	ind_tile_oil_refinery_2;
}

tilelayout industry_layout_oil_refinery_3 {
0,0:	ind_tile_oil_refinery_2;	0,1:	ind_tile_oil_refinery_2;						0,3:	ind_tile_oil_refinery_3;	0,4:	ind_tile_oil_refinery_1;
1,0:	ind_tile_oil_refinery_2;	1,1:	ind_tile_oil_refinery_2;						1,3:	ind_tile_oil_refinery_1;	1,4:	ind_tile_oil_refinery_4;
2,0:	ind_tile_oil_refinery_7;															2,3:	ind_tile_oil_refinery_5;	2,4:	ind_tile_oil_refinery_7;
3,0:	ind_tile_oil_refinery_11;															3,3:	ind_tile_oil_refinery_5;	3,4:	ind_tile_oil_refinery_2;	3,5:	ind_tile_oil_refinery_2;
4,0:	ind_tile_oil_refinery_2;	4,1:	ind_tile_oil_refinery_2;						4,3:	ind_tile_oil_refinery_11;	4,4:	ind_tile_oil_refinery_10;	4,5:	ind_tile_oil_refinery_9;
5,0:	ind_tile_oil_refinery_2;	5,1:	ind_tile_oil_refinery_2;						5,3:	ind_tile_oil_refinery_9;	5,4:	ind_tile_oil_refinery_3;	5,5:	ind_tile_oil_refinery_7;
}

/* Industry Construction Switches - Read from bottom to top */

/* Generated oil refineries must be within 15 tiles of water. Does not apply to industries prospected in the Scenario Editor by building "Many random industries" */
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_distance_water, water_distance > 15 && game_mode != GAMEMODE_EDITOR) {1: CB_RESULT_LOCATION_DISALLOW; switch_industrial_district_1;}

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_distance_competitor, industry_distance(industry_oil_refinery, -1) > 100 ) {1: switch_oil_refinery_distance_water; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_oil_refinery_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_oil_refinery_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_oil_refinery_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_oil_refinery_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_oil_refinery_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/* If "Generate primary only" parameter enabled, disallow random generation of secondary industries */
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_oil_refinery_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_oil_refinery_town_distance_check_1; switch_oil_refinery_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_oil_refinery_allow_prospected;}

item (FEAT_INDUSTRIES, industry_oil_refinery, 9) {
	property {
		substitute:				INDUSTRYTYPE_OIL_REFINERY;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("OIL_", produce_cargo("RFPR",1), produce_cargo("PASS",0.25)),
		];
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_OIL_REFINERY));
		fund_cost_multiplier:	160;
		layouts:				[
			industry_layout_oil_refinery_1,
			industry_layout_oil_refinery_2,
			industry_layout_oil_refinery_3,
		];
		map_colour:				191;
		conflicting_ind_types:	[industry_oil_wells, industry_farm];
	}
	graphics {
		location_check:			switch_oil_refinery_allow_funded;
		construction_probability:	(current_year >= 1900) ? 3 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1900");
		colour:					COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_1;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_2;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_3;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_4;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_5;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_6) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_6;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_7) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_7;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_8) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_8;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_9) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_9;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_10) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_10;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_11) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_11;
		colour:			COLOUR_YELLOW;
	}
}

/* *** End Oil Refinery *** */


/* *** Begin Oil Rig *** */

/* Use default Oil Rig instead of defining it ourselves, to use base game distance from map edge settings. No way to access that menu setting with a custom industry. */
/* If Oil Rigs are disabled, disable the base game item. */
if (param_oil_rigs == 0) {
	disable_item(FEAT_INDUSTRIES, 5);
}

/* *** End Oil Rig *** */

/* *** Begin Oil Wells *** */

spritelayout sprlay_oil_wells_1_a { 
	ground		{sprite:2173;}
	building	{sprite:2174;}
}
spritelayout sprlay_oil_wells_1_b { 
	ground		{sprite:2173;}
	building	{sprite:2175;}
}
spritelayout sprlay_oil_wells_1_c { 
	ground		{sprite:2173;}
	building	{sprite:2176;}
}
spritelayout sprlay_oil_wells_1_d { 
	ground		{sprite:2173;}
	building	{sprite:2177;}
}
spritelayout sprlay_oil_wells_1_e { 
	ground		{sprite:2173;}
	building	{sprite:2178;}
}
spritelayout sprlay_oil_wells_1_f { 
	ground		{sprite:2173;}
	building	{sprite:2179;}
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_animation, animation_frame) {
	1:	sprlay_oil_wells_1_a;
	2:	sprlay_oil_wells_1_b;
	3:	sprlay_oil_wells_1_c;
	4:	sprlay_oil_wells_1_d;
	5:	sprlay_oil_wells_1_e;
	6:	sprlay_oil_wells_1_f;
	7:	sprlay_oil_wells_1_e;
	8:	sprlay_oil_wells_1_d;
	9:	sprlay_oil_wells_1_c;
	10:	sprlay_oil_wells_1_b;
	11:	sprlay_oil_wells_1_a;
	12:	sprlay_oil_wells_1_b;
	13:	sprlay_oil_wells_1_c;
	14:	sprlay_oil_wells_1_d;
	15:	sprlay_oil_wells_1_e;
	16:	sprlay_oil_wells_1_f;
	17:	sprlay_oil_wells_1_e;
	18:	sprlay_oil_wells_1_d;
	19:	sprlay_oil_wells_1_c;
	20:	sprlay_oil_wells_1_b;
	sprlay_oil_wells_1_a;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_stop_anim, animation_frame) {
	1: return 11; // jump to the 'stop animation cycle' when triggered and currently animated
	2: return 12;
	3: return 13;
	4: return 14;
	5: return 15;
	6: return 16;
	7: return 17;
	8: return 18;
	9: return 19;
	10: return 20;
	return CB_RESULT_DO_NOTHING;
}
switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_start_anim, animation_frame) {
	11: return 1;
	12: return 2;
	13: return 3;
	14: return 4;
	15: return 5;
	16: return 6;
	17: return 7;
	18: return 8;
	19: return 9;
	20: return 10;
	return CB_RESULT_START_ANIMATION;
}

random_switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_random_anim_trigger_switch, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
	1: return oil_wells_tile_1_stop_anim;
	1: return oil_wells_tile_1_start_anim;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_next_frame_switch, animation_frame) {
	10: return 1;
	11: return CB_RESULT_STOP_ANIMATION; // Don't actually stop animation, just keep looping the same frame over and over. // CB_RESULT_STOP_ANIMATION
	20: return 11;
	return CB_RESULT_NEXT_FRAME;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_graphics_switch, construction_state) {
	1: sprlay_oil_wells_1_a;
	2: sprlay_oil_wells_1_a;
	oil_wells_tile_animation;
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_wells) {
property {
	substitute:				02; 
	animation_info:			[ANIMATION_LOOPING, 20];
	animation_speed:		3;
	animation_triggers:		bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP);
	special_flags:			bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
	land_shape_flags:		bitmask(LSF_ONLY_ON_FLAT_LAND);
}
graphics {
	anim_control: oil_wells_tile_1_random_anim_trigger_switch;
	anim_next_frame: oil_wells_tile_1_next_frame_switch;
	random_trigger: oil_wells_tile_1_random_anim_trigger_switch;
		oil_wells_tile_1_graphics_switch;
}}

tilelayout industry_layout_oil_wells_1 {
	0,0:	ind_tile_oil_wells;		0,2:	ind_tile_oil_wells;		0,4:	ind_tile_oil_wells;
	2,0:	ind_tile_oil_wells;		2,2:	ind_tile_oil_wells;		2,4:	ind_tile_oil_wells;
}

tilelayout industry_layout_oil_wells_2 {
	0,0:	ind_tile_oil_wells;		0,2:	ind_tile_oil_wells;	
	2,0:	ind_tile_oil_wells;		2,2:	ind_tile_oil_wells;
	4,0:	ind_tile_oil_wells;		4,2:	ind_tile_oil_wells;
}

switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+100) {1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 10 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_oil_wells_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_oil_wells_location_check_3;} 
	// Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_location_check_1, nearby_tile_height(0,0) > 2 && param_elevation_checks == 1) {1: return CB_RESULT_LOCATION_DISALLOW; switch_oil_wells_location_check_2;} 
	// If elevation checks are enabled, Oil Wells must be built at tile height 2 or below.

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_oil_wells_location_check_1;}

item (FEAT_INDUSTRIES, industry_oil_wells, 8) {
	property {
		substitute:				INDUSTRYTYPE_OIL_WELLS;
		life_type:				IND_LIFE_TYPE_EXTRACTIVE;
		cargo_types:			[
								produce_cargo("OIL_",12),
		];
		name:					TTD_STR_INDUSTRY_NAME_OIL_WELLS;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_OIL_WELLS));
		fund_cost_multiplier:	139;
		layouts:				[industry_layout_oil_wells_1, industry_layout_oil_wells_2,];
		map_colour:				152;
		spec_flags:				0;
		conflicting_ind_types:	[industry_oil_refinery, industry_farm];
	}
	graphics {
		location_check:			switch_oil_wells_allow_funded;
		construction_probability:	(current_year >= 1900) ? 15 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1900");
	}
}

item (FEAT_OBJECTS, object_item_oil_wells_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_WELLS;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_wells_1_a;
	}
}

/* *** End Oil Wells *** */


/* *** Begin Paper Mill *** */

spritelayout sprlay_paper_mill_9_N {
	ground		{sprite:3981;}
	building	{sprite:2169; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_E {
	ground		{sprite:3981;}
	building	{sprite:2170; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_W {
	ground		{sprite:3981;}
	building	{sprite:2171; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_S {
	ground		{sprite:3981;}
	building	{sprite:2172; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_paper_mill_chem_1 { // Tall tank
	ground		{sprite:1420;}
	building	{sprite:2083; yoffset:4; xoffset:4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_chem_2 { // Pipe frame 1
	ground		{sprite:1420;}
	building	{sprite:2089; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_chem_3 { // Pipe frame 2
	ground		{sprite:1420;}
	building	{sprite:2092; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_logs_1 {
	ground		{sprite:2022;}
	building	{sprite:2071;}
}

spritelayout sprlay_paper_mill_logs_2 {
	ground		{sprite:2022;}
	building	{sprite:2070;}
}

spritelayout sprlay_paper_mill_transformers {
	ground		{sprite:2022;}
	building	{sprite:2054;}
}

spritelayout sprlay_paper_mill_empty {
	ground		{sprite:2022;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_N) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_E) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_E;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_W) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_W;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_S) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_S;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_1) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_chem_1;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_2) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_chem_2;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_3) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_chem_3;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_logs_1) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_logs_1;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_logs_2) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_logs_2;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_transformers) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_transformers;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_empty) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_empty;}
}

tilelayout industry_layout_paper_mill_1 {
0,0:	ind_tile_paper_mill_9_N;	0,1:	ind_tile_paper_mill_9_E;	0,2:	ind_tile_paper_mill_chem_2;	0,3:	ind_tile_paper_mill_chem_1;
1,0:	ind_tile_paper_mill_9_W;	1,1:	ind_tile_paper_mill_9_S;	1,2:	ind_tile_paper_mill_9_N;	1,3:	ind_tile_paper_mill_9_E;
2,0:	ind_tile_paper_mill_chem_1;	2,1:	ind_tile_paper_mill_chem_3;	2,2:	ind_tile_paper_mill_9_W;	2,3:	ind_tile_paper_mill_9_S;
3,0:	ind_tile_paper_mill_9_N;	3,1:	ind_tile_paper_mill_9_E;	3,2:	ind_tile_paper_mill_logs_1;	3,3:	ind_tile_paper_mill_logs_1;
4,0:	ind_tile_paper_mill_9_W;	4,1:	ind_tile_paper_mill_9_S;	4,2:	ind_tile_paper_mill_logs_1;	4,3:	ind_tile_paper_mill_logs_1;
}

tilelayout industry_layout_paper_mill_2 {
0,0:	ind_tile_paper_mill_9_N;			0,1:	ind_tile_paper_mill_9_E;	0,2:	ind_tile_paper_mill_logs_1;
1,0:	ind_tile_paper_mill_9_W;			1,1:	ind_tile_paper_mill_9_S;	1,2:	ind_tile_paper_mill_logs_1;		1,3:	ind_tile_paper_mill_empty;
2,0:	ind_tile_paper_mill_transformers;	2,1:	ind_tile_paper_mill_9_N;	2,2:	ind_tile_paper_mill_9_E;		2,3:	ind_tile_paper_mill_logs_2;
											3,1:	ind_tile_paper_mill_9_W;	3,2:	ind_tile_paper_mill_9_S;
}

tilelayout industry_layout_paper_mill_3 {
0,0:	ind_tile_paper_mill_chem_3;		0,1:	ind_tile_paper_mill_chem_1;		0,2:	ind_tile_paper_mill_9_N;	0,3:	ind_tile_paper_mill_9_E;
1,0:	ind_tile_paper_mill_logs_1;		1,1:	ind_tile_paper_mill_empty;		1,2:	ind_tile_paper_mill_9_W;	1,3:	ind_tile_paper_mill_9_S;
2,0:	ind_tile_paper_mill_logs_2;		2,1:	ind_tile_paper_mill_9_N;		2,2:	ind_tile_paper_mill_9_E;
3,0:	ind_tile_paper_mill_logs_1;		3,1:	ind_tile_paper_mill_9_W;		3,2:	ind_tile_paper_mill_9_S;
}

/* Industry Construction Switches - Read from bottom to top */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_distance_competitor, industry_distance(industry_paper_mill, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_paper_mill_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_paper_mill_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_paper_mill_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_paper_mill_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_paper_mill_town_distance_check_2;} 
	// Add up the town zone radii and store it in temporary register 0


/* If "Generate primary only" parameter enabled, disallow random generation of secondary industries */
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_paper_mill_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_paper_mill_town_distance_check_1; switch_paper_mill_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_paper_mill_allow_prospected;}

item (FEAT_INDUSTRIES, industry_paper_mill, 7) {
	property {
		substitute:				INDUSTRYTYPE_PAPER_MILL;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("WOOD", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("RFPR", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("RCYC", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
		];
		name:					TTD_STR_INDUSTRY_NAME_PAPER_MILL;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_PAPER_MILL));
		prob_map_gen:			1;
		prob_in_game:			1;
		fund_cost_multiplier:	90;
		map_colour:				184;
		layouts:				[
			industry_layout_paper_mill_1,
			industry_layout_paper_mill_2,
			industry_layout_paper_mill_3,
		];
		conflicting_ind_types:	[industry_forest, industry_farm];
	}
	graphics {
		location_check:			switch_paper_mill_allow_funded;
		construction_probability:	(current_year >= 1885) ? 3 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1885");
		colour:					COLOUR_DARK_GREEN;
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_paper_mill_9, relative_pos) {
	relative_coord(0, 0): sprlay_paper_mill_9_N;
	relative_coord(0, 1): sprlay_paper_mill_9_E;
	relative_coord(1, 0): sprlay_paper_mill_9_W;
    relative_coord(1, 1): sprlay_paper_mill_9_S;
}

item (FEAT_OBJECTS, object_item_paper_mill_9) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_PAPER_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1845;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_paper_mill_9;
		colour:					COLOUR_DARK_GREEN;
	}
}

/* *** End Paper Mill *** */


/* *** Begin Power Plant *** */

spritelayout sprlay_power_plant_1 { // Powerhouse
	ground		{sprite:1420;}
	building	{sprite:2050;}
}

spritelayout sprlay_power_plant_2 { // Power terminals
	ground		{sprite:1420;}
	building	{sprite:2053;}
}

spritelayout sprlay_power_plant_3 { // Transformers
	ground		{sprite:1420;}
	building	{sprite:2054; yoffset:2;}
}

spritelayout sprlay_power_plant_4 { // Cooling tower
	ground		{sprite:3981;}
	building	{sprite:2047;}
}

switch (FEAT_INDUSTRYTILES, SELF, switch_power_plant_cooling_tower_availability, current_year >= 1918) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_4) { // Cooling tower
property {
	substitute:			07; 
	accepted_cargos: 	[[PASS, 8]];
	special_flags:		bitmask(INDTILE_FLAG_ACCEPT_ALL);
	land_shape_flags:	bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
graphics {
	default: sprlay_power_plant_4;
	tile_check:	switch_power_plant_cooling_tower_availability;
}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_1) { // Powerhouse
property {
	substitute:	08; 
	accepted_cargos: 	[[PASS, 8]];
	special_flags:		bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {
	default: sprlay_power_plant_1;
}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_2) { // Power terminals
property {
	substitute:	09; 
	accepted_cargos: 	[[PASS, 8]];
	special_flags:		bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {
	default: sprlay_power_plant_2;
}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_3) { // Transformers
property {
	substitute:	10; 
	accepted_cargos: 	[[PASS, 8]];
	special_flags:		bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {
	default: sprlay_power_plant_3;
}}


tilelayout industry_layout_power_plant_1 {
0,0:	ind_tile_power_plant_1;	0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_2;	1,1:	ind_tile_power_plant_2;
2,0:	ind_tile_power_plant_3;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_2 {
0,0:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_1;	1,1:	ind_tile_power_plant_3;
2,0:	ind_tile_power_plant_2;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_4 {
0,0:	ind_tile_power_plant_4;		0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_3;		1,1:	ind_tile_power_plant_1;
2,0:	ind_tile_power_plant_3;		2,1:	ind_tile_power_plant_2;
}

tilelayout industry_layout_power_plant_5 {
0,0:	ind_tile_power_plant_4;	/*0,1:	clear;	*/					0,2:	ind_tile_power_plant_4;
/*1,0:	clear;	*/				/*1,1:	clear;	*/					/*1,2:	clear;*/
2,0:	ind_tile_power_plant_1;	2,1:	ind_tile_power_plant_3;		2,2:	ind_tile_power_plant_1;
3,0:	ind_tile_power_plant_2;	3,1:	ind_tile_power_plant_2;		3,2:	ind_tile_power_plant_2;
4,0:	ind_tile_power_plant_1;	4,1:	ind_tile_power_plant_3;		4,2:	ind_tile_power_plant_1;
/*5,0:	clear;	*/				/*5,1:	clear;*/					/*5,2:	clear;*/
6,0:	ind_tile_power_plant_4;	/*6,1:	clear;*/					6,2:	ind_tile_power_plant_4;
}

/* Industry Construction Switches - Read from bottom to top */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_distance_competitor, industry_distance(industry_power_plant, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_power_plant_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_power_plant_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_power_plant_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/* If "Generate primary only" parameter enabled, disallow random generation of secondary industries */
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_power_plant_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_power_plant_town_distance_check_1; switch_power_plant_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_power_plant_allow_prospected;}

/* Power Plant industry */
item (FEAT_INDUSTRIES, industry_power_plant, 2) {
	property {
		substitute:				INDUSTRYTYPE_POWER_PLANT;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types: [ 
				accept_cargo("COAL", produce_cargo("PASS",0.25)),
				accept_cargo("OIL_", produce_cargo("PASS",0.25)), 
				accept_cargo("WSTE", produce_cargo("PASS",0.25)),
				accept_cargo("NUKF", produce_cargo("NUKW",0.5), produce_cargo("PASS",0.5)),
			];
		name:					string(STR_NAME_POWER_PLANT);
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_POWER_PLANT));
		fund_cost_multiplier:	27;
		layouts:				[
			industry_layout_power_plant_1,
			industry_layout_power_plant_2,
			industry_layout_power_plant_4,
			industry_layout_power_plant_5,
			];
		map_colour:				208;
		conflicting_ind_types:	[industry_coal_mine, industry_farm];
	}
	graphics {
		location_check:			switch_power_plant_allow_funded;
		construction_probability:	(current_year >= 1882) ? 3 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1882");
	}
}


item (FEAT_OBJECTS, object_item_power_plant_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_1;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_2;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_3;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_4;
	}
}

/* *** End Power Plant *** */

/* *** Begin Recycling Center *** */

spritelayout sprlay_recycling_center_shed { // Main building
	ground		{sprite:2022;}
	building	{sprite:2190;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_recycling_center_dock { // Loading dock
	ground		{sprite:2022;}
	building	{sprite:2193;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_recycling_center_silo { // Large silo
	ground		{sprite:1420;}
	building	{sprite:2196;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_recycling_center_yard { // grass and fence
	ground		{sprite:2022;}
	building	{sprite:2199;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_recycling_center_pumps_box { // Pumps with boxes
	ground		{sprite:1420;}
	building	{sprite:2349;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_recycling_center_pumps_reflector { // Pumps with reflector
	ground		{sprite:1420;}
	building	{sprite:2352;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_recycling_center_silos { // Twin silos
	ground		{sprite:1420;}
	building	{sprite:2115;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_recycling_center_office { // Office
	ground		{sprite:1420;}
	building	{sprite:2095; yoffset:2; xoffset:2;}
}
	
spritelayout sprlay_recycling_center_paved { // Empty paved tilelayout
	ground		{sprite:1420;}	
}

item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_shed) {
	property {
		substitute:				11;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_shed;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_dock) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_dock;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_silo) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_silo;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_yard) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_yard;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_pumps_box) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_pumps_box;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_pumps_reflector) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_pumps_reflector;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_twin_silos) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_silos;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_office) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_office;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_recycling_center_paved) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_recycling_center_paved;
	}
}

tilelayout industry_layout_recycling_center_1 {
	0,0:	ind_tile_recycling_center_twin_silos;
	0,1:	ind_tile_recycling_center_twin_silos;
	0,2:	ind_tile_recycling_center_dock;
	
	1,0:	ind_tile_recycling_center_shed;
	1,1:	ind_tile_recycling_center_shed;
	1,2:	ind_tile_recycling_center_dock;

	2,0:	ind_tile_recycling_center_shed;
	2,1:	ind_tile_recycling_center_shed;
}

tilelayout industry_layout_recycling_center_2 {
	0,0:	ind_tile_recycling_center_twin_silos;
	0,1:	ind_tile_recycling_center_shed;
	0,2:	ind_tile_recycling_center_dock;
	
	1,0:	ind_tile_recycling_center_shed;
	1,1:	ind_tile_recycling_center_shed;
	1,2:	ind_tile_recycling_center_office;
}

tilelayout industry_layout_recycling_center_3 {
	0,0:	ind_tile_recycling_center_twin_silos;
	0,1:	ind_tile_recycling_center_dock;
	
	1,0:	ind_tile_recycling_center_shed;
	1,1:	ind_tile_recycling_center_dock;
	
	2,0:	ind_tile_recycling_center_shed;
	2,1:	ind_tile_recycling_center_yard;
	
	3,0:	ind_tile_recycling_center_shed;
	3,1:	ind_tile_recycling_center_yard;
}


/* Industry Construction Switches - Read from bottom to top */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_recycling_center_distance_competitor, industry_distance(industry_recycling_center, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_recycling_center_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_recycling_center_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_recycling_center_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_recycling_center_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_recycling_center_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_recycling_center_town_distance_check_2;} 
	// Add up the town zone radii and store it in temporary register 0



/* If "Generate primary only" parameter enabled, disallow random generation of secondary industries */
switch (FEAT_INDUSTRIES, SELF, switch_recycling_center_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_recycling_center_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_recycling_center_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_recycling_center_town_distance_check_1; switch_recycling_center_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_recycling_center_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_recycling_center_allow_prospected;}

/* Define industry and objects only if Waste & Recycling chain is active. Check parameter only and rely on error message to catch a lack of compatible house sets. */

if (param_recyclables == 1) {	
	item (FEAT_INDUSTRIES, industry_recycling_center, 10) {
		property {
			substitute:				INDUSTRYTYPE_FOOD_PROCESSING_PLANT;
			override:				INDUSTRYTYPE_FOOD_PROCESSING_PLANT;
			life_type:				IND_LIFE_TYPE_PROCESSING;
			spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
			cargo_types:			[
				accept_cargo("WSTE", produce_cargo("RCYC",1), produce_cargo("PASS",0.25)),
			];
			name:					string(STR_NAME_RECYCLING_CENTER);
			nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_RECYCLING_CENTER));
			prob_map_gen:			5;
			prob_in_game:			3;
			map_colour:				139;
			fund_cost_multiplier:	31;
			layouts:				[
				industry_layout_recycling_center_1,
				industry_layout_recycling_center_2,
				industry_layout_recycling_center_3,
			];
			conflicting_ind_types:	[industry_farm];
		}
		graphics {
			location_check:			switch_recycling_center_allow_funded;
			colour:					COLOUR_MAUVE;
			construction_probability:	(current_year >= 1945) ? 6 : 0;
			extra_text_fund:		string(STR_FUND_AVAILABLE, "1945");
		}
	}
	

	item (FEAT_OBJECTS, object_item_recycling_center_1) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_RECYCLING_CENTER);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1945;
			num_views:				1;
		}
		graphics {
			default:				sprlay_recycling_center_shed;
			colour:					COLOUR_MAUVE;
		}
	}

	item (FEAT_OBJECTS, object_item_recycling_center_2) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_RECYCLING_CENTER);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1945;
			num_views:				1;
		}
		graphics {
			default:				sprlay_recycling_center_dock;
			colour:					COLOUR_MAUVE;
		}
	}

	item (FEAT_OBJECTS, object_item_recycling_center_3) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_RECYCLING_CENTER);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1945;
			num_views:				1;
		}
		graphics {
			default:				sprlay_recycling_center_silo;
			colour:					COLOUR_MAUVE;
		}
	}

	item (FEAT_OBJECTS, object_item_recycling_center_4) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_RECYCLING_CENTER);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1945;
			num_views:				1;
		}
		graphics {
			default:				sprlay_recycling_center_yard;
			colour:					COLOUR_MAUVE;
		}
	}

	item (FEAT_OBJECTS, object_item_recycling_center_5) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_RECYCLING_CENTER);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1945;
			num_views:				1;
		}
		graphics {
			default:				sprlay_recycling_center_pumps_box;
			colour:					COLOUR_MAUVE;
		}
	}

	item (FEAT_OBJECTS, object_item_recycling_center_6) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_RECYCLING_CENTER);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1945;
			num_views:				1;
		}
		graphics {
			default:				sprlay_recycling_center_pumps_reflector;
			colour:					COLOUR_MAUVE;
		}
	}

	item (FEAT_OBJECTS, object_item_recycling_center_7) {
		property {
			class:					"HSIN";
			classname:				string(STR_NAME_OBJECT_MENU);
			name:					string(STR_NAME_RECYCLING_CENTER);
			climates_available:		ALL_CLIMATES;
			object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
			build_cost_multiplier:	0;
			remove_cost_multiplier:	0;
			size:					[1,1];
			introduction_date:		1945;
			num_views:				1;
		}
		graphics {
			default:				sprlay_recycling_center_silos;
			colour:					COLOUR_MAUVE;
		}
	}
}
/* *** End Recycling Center *** */


/* *** Begin Sawmill *** */

spritelayout sprlay_sawmill_1 {
	ground		{sprite:2022;}
	building	{sprite:2070;}
}

spritelayout sprlay_sawmill_2 {
	ground		{sprite:2022;}
	building	{sprite:2071;}
}

spritelayout sprlay_sawmill_3 {
	ground		{sprite:2022;}
	building	{sprite:2063;}
}

spritelayout sprlay_sawmill_4 {
	ground		{sprite:2022;}
	building	{sprite:2069;}
}

spritelayout sprlay_sawmill_5 {
	ground		{sprite:2022;}
	building	{sprite:2066;}
}

spritelayout sprlay_sawmill_6 {
	ground		{sprite:2022;}
}

item (FEAT_INDUSTRYTILES, ind_tile_sawmill_1) {
	property {
		substitute:				11;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: [[PASS, 8]];
	}
	graphics {
		default:				sprlay_sawmill_1;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_sawmill_2) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: [[PASS, 8]];
	}
	graphics {
		default:				sprlay_sawmill_2;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_sawmill_3) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: [[PASS, 8]];
	}
	graphics {
		default:				sprlay_sawmill_3;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_sawmill_4) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: [[PASS, 8]];
	}
	graphics {
		default:				sprlay_sawmill_4;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_sawmill_5) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: [[PASS, 8]];
	}
	graphics {
		default:				sprlay_sawmill_5;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_sawmill_6) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: [[PASS, 8]];
	}
	graphics {
		default:				sprlay_sawmill_6;
	}
}

tilelayout industry_layout_sawmill_1 {
	0,0:	ind_tile_sawmill_5;	0,1:	ind_tile_sawmill_6;	0,2:	ind_tile_sawmill_4;
	1,0:	ind_tile_sawmill_3;	1,1:	ind_tile_sawmill_1;	1,2:	ind_tile_sawmill_2;
}

tilelayout industry_layout_sawmill_2 {
	0,0:	ind_tile_sawmill_1;	0,1:	ind_tile_sawmill_6;	0,2:	ind_tile_sawmill_4;	0,3:	ind_tile_sawmill_4;
	1,0:	ind_tile_sawmill_1;	1,1:	ind_tile_sawmill_3;	1,2:	ind_tile_sawmill_2;	1,3:	ind_tile_sawmill_5;
}

tilelayout industry_layout_sawmill_3 {
	0,0:	ind_tile_sawmill_5;	0,1:	ind_tile_sawmill_1;	0,2:	ind_tile_sawmill_1;
	1,0:	ind_tile_sawmill_6;	1,1:	ind_tile_sawmill_4;	1,2:	ind_tile_sawmill_2;
										2,1:	ind_tile_sawmill_3;	2,2:	ind_tile_sawmill_6;
}

/* Industry Construction Switches - Read from bottom to top */


/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_sawmill_distance_competitor, industry_distance(industry_sawmill, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_sawmill_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_sawmill_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_sawmill_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_sawmill_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_sawmill_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_sawmill_town_distance_check_2;} 
	// Add up the town zone radii and store it in temporary register 0


/* If "Generate primary only" parameter enabled, disallow random generation of secondary industries */
switch (FEAT_INDUSTRIES, SELF, switch_sawmill_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_sawmill_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_sawmill_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_sawmill_town_distance_check_1; switch_sawmill_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_sawmill_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_sawmill_allow_prospected;}

item (FEAT_INDUSTRIES, industry_sawmill, 6) {
	property {
		substitute:				INDUSTRYTYPE_SAWMILL;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[accept_cargo("WOOD", produce_cargo("WDPR",1), produce_cargo("PASS",0.25)),];
		name:					TTD_STR_INDUSTRY_NAME_SAWMILL;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_SAWMILL));
		fund_cost_multiplier:	20;
		layouts:				[
			industry_layout_sawmill_1,
			industry_layout_sawmill_2,
			industry_layout_sawmill_3,
		];
		conflicting_ind_types:	[industry_forest, industry_farm];
	}
	graphics {
		location_check:			switch_sawmill_allow_funded;
		construction_probability:	(current_year >= 1800) ? 9 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1800");
	}
}

item (FEAT_OBJECTS, object_item_sawmill_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_SAWMILL;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_sawmill_1;
	}
}

item (FEAT_OBJECTS, object_item_sawmill_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_SAWMILL;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_sawmill_2;
	}
}

item (FEAT_OBJECTS, object_item_sawmill_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_SAWMILL;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_sawmill_3;
	}
}

item (FEAT_OBJECTS, object_item_sawmill_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_SAWMILL;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_sawmill_4;
	}
}

item (FEAT_OBJECTS, object_item_sawmill_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_SAWMILL;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_sawmill_5;
	}
}
item (FEAT_OBJECTS, object_item_sawmill_6) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_SAWMILL;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE,OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_sawmill_6;
	}
}

/* *** End Sawmill *** */

/* *** Begin Steel Mill *** */

spritelayout sprlay_steel_mill_1_N {
	ground		{sprite:2118;}
	building	{sprite:2119;}
}
spritelayout sprlay_steel_mill_1_E {
	ground		{sprite:2120;}
	building	{sprite:2121;}
}
spritelayout sprlay_steel_mill_1_W {
	ground		{sprite:2122;}
	building	{sprite:2123;}
}
spritelayout sprlay_steel_mill_1_S {
	ground		{sprite:2124;}
}

spritelayout sprlay_steel_mill_2_N {
	ground		{sprite:2125;}
	building	{sprite:2126;}
}
spritelayout sprlay_steel_mill_2_W {
	ground		{sprite:2127;}
	building	{sprite:2128;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_N) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_steel_mill_1_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_E) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_steel_mill_1_E;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_W) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_steel_mill_1_W;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_S) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_steel_mill_1_S;}
}


item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_2_N) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_steel_mill_2_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_2_W) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_steel_mill_2_W;}
}

tilelayout industry_layout_steel_mill_1 {
0,0: ind_tile_steel_mill_2_N;	0,1: ind_tile_steel_mill_2_N;	0,2: ind_tile_steel_mill_2_N;	0,3: ind_tile_steel_mill_2_N;	
1,0: ind_tile_steel_mill_2_W;	1,1: ind_tile_steel_mill_2_W;	1,2: ind_tile_steel_mill_2_W;	1,3: ind_tile_steel_mill_2_W;
	
2,0: ind_tile_steel_mill_2_N;	2,1: ind_tile_steel_mill_2_N;	2,2: ind_tile_steel_mill_1_N;	2,3: ind_tile_steel_mill_1_E;
3,0: ind_tile_steel_mill_2_W;	3,1: ind_tile_steel_mill_2_W;	3,2: ind_tile_steel_mill_1_W;	3,3: ind_tile_steel_mill_1_S;

4,0: ind_tile_steel_mill_1_N;	4,1: ind_tile_steel_mill_1_E;	4,2: ind_tile_steel_mill_1_N;	4,3: ind_tile_steel_mill_1_E;
5,0: ind_tile_steel_mill_1_W;	5,1: ind_tile_steel_mill_1_S;	5,2: ind_tile_steel_mill_1_W;	5,3: ind_tile_steel_mill_1_S;

}

/* Industry Construction Switches - Read from bottom to top */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_distance_competitor, industry_distance(industry_steel_mill, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */

switch (FEAT_INDUSTRIES, PARENT, switch_steel_mill_population_check_1, // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
	[StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
		{1: switch_steel_mill_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_steel_mill_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_steel_mill_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_steel_mill_town_distance_check_2;} 
	// Add up the town zone radii and store it in temporary register 0


/* If "Generate primary only" parameter enabled, disallow random generation of secondary industries */
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_steel_mill_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_steel_mill_town_distance_check_1; switch_steel_mill_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_steel_mill_allow_prospected;}

item (FEAT_INDUSTRIES, industry_steel_mill, 4) {
	property {
		substitute:				INDUSTRYTYPE_STEEL_MILL;
		override:				INDUSTRYTYPE_STEEL_MILL;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("IORE", produce_cargo("STEL",1), produce_cargo("PASS",0.25)),
								accept_cargo("COAL", produce_cargo("STEL",1), produce_cargo("PASS",0.25)),
								accept_cargo("RCYC", produce_cargo("STEL",1), produce_cargo("PASS",0.25)),
		];
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_STEEL_MILL));
		fund_cost_multiplier:	80;
		layouts:				[industry_layout_steel_mill_1,];
		map_colour:				10;
		conflicting_ind_types:	[industry_iron_mine, industry_coal_mine, industry_farm];
	}
	graphics {
		location_check:			switch_steel_mill_allow_funded;
		construction_probability:	(current_year >= 1856) ? 3 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1856");
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_steel_mill_1, relative_pos) {
	relative_coord(0, 0): sprlay_steel_mill_1_N;
	relative_coord(0, 1): sprlay_steel_mill_1_E;
	relative_coord(1, 0): sprlay_steel_mill_1_W;
    relative_coord(1, 1): sprlay_steel_mill_1_S;
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_steel_mill_2, relative_pos) {
	relative_coord(0, 0): sprlay_steel_mill_2_N;
	relative_coord(1, 0): sprlay_steel_mill_2_W;
}

item (FEAT_OBJECTS, object_item_steel_mill_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_steel_mill_1;
		purchase:				sprlay_steel_mill_1_N;
	}
}

item (FEAT_OBJECTS, object_item_steel_mill_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,1];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_steel_mill_2;
		purchase:				sprlay_steel_mill_2_N;
	}
}

/* *** End Steel Mill *** */


/* *** Begin Uranium Mine *** */

item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_72) {
property {substitute:	72; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_00;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_73) {
property {substitute:	73; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_01;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_74) {
property {substitute:	74; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_02;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_75) {
property {substitute:	75; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_03;}
}

item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_76) {
property {substitute:	76; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_10;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_77) {
property {substitute:	77; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_11;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_78) {
property {substitute:	78; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_12;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_79) {
property {substitute:	79; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_13;}
}

item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_80) {
property {substitute:	80; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_20;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_81) {
property {substitute:	81; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_21;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_82) {
property {substitute:	82; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_22;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_83) {
property {substitute:	83; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_23;}
}

item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_84) {
property {substitute:	84; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_30;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_85) {
property {substitute:	85; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_31;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_86) {
property {substitute:	86; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_32;}
}
item (FEAT_INDUSTRYTILES, ind_tile_uranium_mine_87) {
property {substitute:	87; accepted_cargos: [[PASS, 8]]; special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);}
//graphics {default:		sprlay_uranium_mine_33;}
}

tilelayout industry_layout_uranium_mine {
	0,0:	ind_tile_uranium_mine_72;	0,1:	ind_tile_uranium_mine_73;	0,2:	ind_tile_uranium_mine_74;	0,3:	ind_tile_uranium_mine_75;
	1,0:	ind_tile_uranium_mine_76;	1,1:	ind_tile_uranium_mine_77;	1,2:	ind_tile_uranium_mine_78;	1,3:	ind_tile_uranium_mine_79;
	2,0:	ind_tile_uranium_mine_80;	2,1:	ind_tile_uranium_mine_81;	2,2:	ind_tile_uranium_mine_82;	2,3:	ind_tile_uranium_mine_83;
	3,0:	ind_tile_uranium_mine_84;	3,1:	ind_tile_uranium_mine_85;	3,2:	ind_tile_uranium_mine_86;	3,3:	ind_tile_uranium_mine_87;
}

if (param_nuclear == 1) {
	item (FEAT_INDUSTRIES, industry_uranium_mine, 13) {
		property {
			substitute:				INDUSTRYTYPE_GOLD_MINE;
			life_type:				IND_LIFE_TYPE_EXTRACTIVE;
			cargo_types:
				[
					produce_cargo("URAN",13),
					accept_cargo("RFPR", produce_cargo("URAN",1), produce_cargo("PASS",0.25)),
			];
			name:					string(STR_NAME_URANIUM_MINE);
			nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_URANIUM_MINE));
			fund_cost_multiplier:	240;
			layouts:				[industry_layout_uranium_mine,];
			map_colour:				102;
			conflicting_ind_types:	[industry_nuclear_fuel_plant, industry_farm];
		}
		graphics {
			construction_probability:	(current_year >= 1956) ? 1 : 0;
			extra_text_fund:			string(STR_FUND_AVAILABLE, "1956");
		}
	}
}

/* *** End Uranium Mine *** */
