/* *** Begin Factory ** */

spritelayout sprlay_factory_1_N {
	ground		{sprite:2146;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2150;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_E {
	ground		{sprite:2147;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2151;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_W {
	ground		{sprite:2148;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2152;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_S {
	ground		{sprite:2149;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

item (FEAT_INDUSTRYTILES, ind_tile_factory_1_N) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_factory_1_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_E) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_factory_1_E;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_W) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_factory_1_W;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_S) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {
		default:				sprlay_factory_1_S;
	}
}

tilelayout industry_layout_factory_1x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x1 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	2,2:	ind_tile_factory_1_N;
	2,3:	ind_tile_factory_1_E;
	3,2:	ind_tile_factory_1_W;
	3,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_3x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	2,2:	ind_tile_factory_1_N;
	2,3:	ind_tile_factory_1_E;
	3,2:	ind_tile_factory_1_W;
	3,3:	ind_tile_factory_1_S;
	
	4,0:	ind_tile_factory_1_N;
	4,1:	ind_tile_factory_1_E;
	5,0:	ind_tile_factory_1_W;
	5,1:	ind_tile_factory_1_S;
	
	4,2:	ind_tile_factory_1_N;
	4,3:	ind_tile_factory_1_E;
	5,2:	ind_tile_factory_1_W;
	5,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_C {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	

	
	4,0:	ind_tile_factory_1_N;
	4,1:	ind_tile_factory_1_E;
	5,0:	ind_tile_factory_1_W;
	5,1:	ind_tile_factory_1_S;
	
	4,2:	ind_tile_factory_1_N;
	4,3:	ind_tile_factory_1_E;
	5,2:	ind_tile_factory_1_W;
	5,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_L {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	
	4,0:	ind_tile_factory_1_N;
	4,1:	ind_tile_factory_1_E;
	5,0:	ind_tile_factory_1_W;
	5,1:	ind_tile_factory_1_S;
	
}

/* Industry Construction Switches - Read from bottom to top */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_factory_distance_competitor, industry_distance(industry_factory, -1) > 100 ) {1: switch_industrial_district_1; CB_RESULT_LOCATION_DISALLOW;}

/* Population Check - secondary industries only */
switch (FEAT_INDUSTRIES, PARENT, switch_factory_population_check_1, [StoreRequiredPopulation(), population >= LOAD_TEMP(1)]) 
	{1: switch_factory_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

/* Town Distance Check - secondary industries only */

/* Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size */
switch (FEAT_INDUSTRIES, SELF, switch_factory_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_factory_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} 
	// Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_factory_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_factory_town_distance_check_2;} 
	// Add up the town zone radii and store it in temporary register 0


// If "Generate primary only" parameter enabled, disallow random generation of secondary industries
switch (FEAT_INDUSTRIES, SELF, switch_factory_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_factory_town_distance_check_1;}

/* Prospected industries aren't restricted by industry totals, but must meet other requirements */
switch (FEAT_INDUSTRIES, SELF, switch_factory_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_factory_town_distance_check_1; switch_factory_generate_primary_only;}

/* Funded industries have no restrictions */
switch (FEAT_INDUSTRIES, SELF, switch_factory_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_factory_allow_prospected;}

item (FEAT_INDUSTRIES, industry_factory, 5) {
	property {
		substitute:				INDUSTRYTYPE_TEMPERATE_FACTORY;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("STEL", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("WDPR", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("RFPR", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("FOOD", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
								accept_cargo("RCYC", produce_cargo("GOOD",1), produce_cargo("PASS",0.25)),
		];
		name:					TTD_STR_INDUSTRY_NAME_FACTORY;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FACTORY));
		fund_cost_multiplier:	40;
		layouts:				[
				industry_layout_factory_2x2, 
				industry_layout_factory_1x2, 
				industry_layout_factory_2x1,
				industry_layout_factory_3x2,
				industry_layout_factory_C,
				industry_layout_factory_L,
			];
		conflicting_ind_types:	[industry_farm];
	}
	graphics {
		location_check:			switch_factory_allow_funded;
		colour:					COLOUR_PALE_GREEN;
		construction_probability:	(current_year >= 1800) ? 9 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE, "1800");
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_factory_1, relative_pos) {
	relative_coord(0, 0): sprlay_factory_1_N;
	relative_coord(0, 1): sprlay_factory_1_E;
	relative_coord(1, 0): sprlay_factory_1_W;
    relative_coord(1, 1): sprlay_factory_1_S;
}

item (FEAT_OBJECTS, object_item_factory_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FACTORY;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1800;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_factory_1;
		colour:					COLOUR_PALE_GREEN;
	}
}

/* *** End Factory *** */