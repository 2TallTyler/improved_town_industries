
/* *** Begin Paper Mill *** */

spritelayout sprlay_paper_mill_9_N {
	ground		{sprite:3981;}
	building	{sprite:2169; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_E {
	ground		{sprite:3981;}
	building	{sprite:2170; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_W {
	ground		{sprite:3981;}
	building	{sprite:2171; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_S {
	ground		{sprite:3981;}
	building	{sprite:2172; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_paper_mill_chem_1 { // Tall tank
	ground		{sprite:1420;}
	building	{sprite:2083; yoffset:4; xoffset:4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_chem_2 { // Pipe frame 1
	ground		{sprite:1420;}
	building	{sprite:2089; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_chem_3 { // Pipe frame 2
	ground		{sprite:1420;}
	building	{sprite:2092; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_logs_1 {
	ground		{sprite:2022;}
	building	{sprite:2071;}
}

spritelayout sprlay_paper_mill_logs_2 {
	ground		{sprite:2022;}
	building	{sprite:2070;}
}

spritelayout sprlay_paper_mill_transformers {
	ground		{sprite:2022;}
	building	{sprite:2054;}
}

spritelayout sprlay_paper_mill_empty {
	ground		{sprite:2022;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_N) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_E) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_E;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_W) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_W;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_S) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_9_S;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_1) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_chem_1;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_2) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_chem_2;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_3) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_chem_3;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_logs_1) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_logs_1;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_logs_2) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_logs_2;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_transformers) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_transformers;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_empty) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_paper_mill_empty;}
}

tilelayout industry_layout_paper_mill_1 {
0,0:	ind_tile_paper_mill_9_N;	0,1:	ind_tile_paper_mill_9_E;	0,2:	ind_tile_paper_mill_chem_2;	0,3:	ind_tile_paper_mill_chem_1;
1,0:	ind_tile_paper_mill_9_W;	1,1:	ind_tile_paper_mill_9_S;	1,2:	ind_tile_paper_mill_9_N;	1,3:	ind_tile_paper_mill_9_E;
2,0:	ind_tile_paper_mill_chem_1;	2,1:	ind_tile_paper_mill_chem_3;	2,2:	ind_tile_paper_mill_9_W;	2,3:	ind_tile_paper_mill_9_S;
3,0:	ind_tile_paper_mill_9_N;	3,1:	ind_tile_paper_mill_9_E;	3,2:	ind_tile_paper_mill_logs_1;	3,3:	ind_tile_paper_mill_logs_1;
4,0:	ind_tile_paper_mill_9_W;	4,1:	ind_tile_paper_mill_9_S;	4,2:	ind_tile_paper_mill_logs_1;	4,3:	ind_tile_paper_mill_logs_1;
}

tilelayout industry_layout_paper_mill_2 {
0,0:	ind_tile_paper_mill_9_N;			0,1:	ind_tile_paper_mill_9_E;	0,2:	ind_tile_paper_mill_logs_1;
1,0:	ind_tile_paper_mill_9_W;			1,1:	ind_tile_paper_mill_9_S;	1,2:	ind_tile_paper_mill_logs_1;		1,3:	ind_tile_paper_mill_empty;
2,0:	ind_tile_paper_mill_transformers;	2,1:	ind_tile_paper_mill_9_N;	2,2:	ind_tile_paper_mill_9_E;		2,3:	ind_tile_paper_mill_logs_2;
											3,1:	ind_tile_paper_mill_9_W;	3,2:	ind_tile_paper_mill_9_S;
}

tilelayout industry_layout_paper_mill_3 {
0,0:	ind_tile_paper_mill_chem_3;		0,1:	ind_tile_paper_mill_chem_1;		0,2:	ind_tile_paper_mill_9_N;	0,3:	ind_tile_paper_mill_9_E;
1,0:	ind_tile_paper_mill_logs_1;		1,1:	ind_tile_paper_mill_empty;		1,2:	ind_tile_paper_mill_9_W;	1,3:	ind_tile_paper_mill_9_S;
2,0:	ind_tile_paper_mill_logs_2;		2,1:	ind_tile_paper_mill_9_N;		2,2:	ind_tile_paper_mill_9_E;
3,0:	ind_tile_paper_mill_logs_1;		3,1:	ind_tile_paper_mill_9_W;		3,2:	ind_tile_paper_mill_9_S;
}

/*
 * Register 1: Total production amount
 * Register 2: Passenger production
 * Register 3: Amount of scrap to consume
 * Register 4: Amount of normal input to consume
 */

produce (produce_paper_mill,
    [SCPR: LOAD_TEMP(3); RFPR: LOAD_TEMP(4); WDCH: LOAD_TEMP(4);],  // consume
    [PAPR: LOAD_TEMP(3) + (LOAD_TEMP(4) * 2); PASS: LOAD_TEMP(2);], // produce
    0                                                               // don't run callback again
)

/* If we don't have enough stored, produce as much as we can anyway. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_paper_mill_min, [
    STORE_TEMP(min(incoming_cargo_waiting("WDCH"), incoming_cargo_waiting("RFPR")), 4),
    STORE_TEMP(LOAD_TEMP(3) + LOAD_TEMP(4), 1),
    ]) {produce_paper_mill;}

/* Determine the production level and see if we have enough stored to meet it. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_paper_mill_2, [
    /* Set the passenger production amount. */
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("PAPR")) / 100), 2),

    /* Get the target production amount */
    STORE_TEMP(GetSecondaryProductionLevel(), 1),
    /* How much of the production can be met with scrap? */
    STORE_TEMP(min(LOAD_TEMP(1), incoming_cargo_waiting("SCPR")), 3),
    /* Make up the rest in normal input. */
    STORE_TEMP(LOAD_TEMP(1) - LOAD_TEMP(3), 4),
    /* Check if there's enough input cargo for this production level. */
    min(incoming_cargo_waiting("WDCH"), incoming_cargo_waiting("RFPR")) > LOAD_TEMP(4),
    ]) {
        1: produce_paper_mill;
        switch_produce_paper_mill_min;
    }

/* If no cargo is waiting, bail out. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_paper_mill, incoming_cargo_waiting("SCPR") > 0 || min(incoming_cargo_waiting("WDCH"), incoming_cargo_waiting("RFPR")) > 0)
    {
        1: switch_produce_paper_mill_2;
        produce_none;
    }

/* Location check */
switch (FEAT_INDUSTRIES, SELF, loc_check_paper_mill, IsCity() && IsNearTown() && CityHasNoSecondaryIndustries() && NoNearbyCompetitors(industry_paper_mill, 100)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_LOC_ERROR_SECONDARY);}

item (FEAT_INDUSTRIES, industry_paper_mill, 10) {
	property {
		substitute: INDUSTRYTYPE_PAPER_MILL;
		life_type: IND_LIFE_TYPE_PROCESSING;
		spec_flags: 0;
		cargo_types:[
			accept_cargo("WDCH"),
            accept_cargo("RFPR"),
            accept_cargo("SCPR"),
            produce_cargo("PAPR", 0),
            produce_cargo("PASS", 0),
		];
		name: TTD_STR_INDUSTRY_NAME_PAPER_MILL;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_PAPER_MILL));
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 255;
		map_colour: 184;
		layouts: [
			industry_layout_paper_mill_1,
			industry_layout_paper_mill_2,
			industry_layout_paper_mill_3,
		];
	}
	graphics {
		extra_text_industry: StringGetSecondaryHelptext();
        location_check: loc_check_paper_mill;
        produce_256_ticks: switch_produce_paper_mill;
		colour: COLOUR_DARK_GREEN;
        /* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_paper_mill_9, relative_pos) {
	relative_coord(0, 0): sprlay_paper_mill_9_N;
	relative_coord(0, 1): sprlay_paper_mill_9_E;
	relative_coord(1, 0): sprlay_paper_mill_9_W;
    relative_coord(1, 1): sprlay_paper_mill_9_S;
}

item (FEAT_OBJECTS, object_item_paper_mill_9) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_PAPER_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1845;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_paper_mill_9;
		colour:					COLOUR_DARK_GREEN;
	}
}

/* *** End Paper Mill *** */
