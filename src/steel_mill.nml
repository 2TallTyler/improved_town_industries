
/* *** Begin Steel Mill *** */

spritelayout sprlay_steel_mill_1_N {
	ground		{sprite:2118;}
	building	{sprite:2119;}
}
spritelayout sprlay_steel_mill_1_E {
	ground		{sprite:2120;}
	building	{sprite:2121;}
}
spritelayout sprlay_steel_mill_1_W {
	ground		{sprite:2122;}
	building	{sprite:2123;}
}
spritelayout sprlay_steel_mill_1_S {
	ground		{sprite:2124;}
}

spritelayout sprlay_steel_mill_2_N {
	ground		{sprite:2125;}
	building	{sprite:2126;}
}
spritelayout sprlay_steel_mill_2_W {
	ground		{sprite:2127;}
	building	{sprite:2128;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_N) {
	property {
		substitute:				02;
        accepted_cargos:        [[PASS, 8]];
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {default:			sprlay_steel_mill_1_N;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_E) {
	property {
		substitute:				02;
        accepted_cargos:        [[PASS, 8]];
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {default:			sprlay_steel_mill_1_E;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_W) {
	property {
		substitute:				02;
        accepted_cargos:        [[PASS, 8]];
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {default:			sprlay_steel_mill_1_W;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_S) {
	property {
		substitute:				02;
        accepted_cargos:        [[PASS, 8]];
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {default:			sprlay_steel_mill_1_S;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_2_N) {
	property {
		substitute:				02;
        accepted_cargos:        [[PASS, 8]];
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {default:			sprlay_steel_mill_2_N;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_2_W) {
	property {
		substitute:				02;
        accepted_cargos:        [[PASS, 8]];
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {default:			sprlay_steel_mill_2_W;}
}

tilelayout industry_layout_steel_mill_1 {
    0,0: ind_tile_steel_mill_2_N;	0,1: ind_tile_steel_mill_2_N;	0,2: ind_tile_steel_mill_2_N;	0,3: ind_tile_steel_mill_2_N;
    1,0: ind_tile_steel_mill_2_W;	1,1: ind_tile_steel_mill_2_W;	1,2: ind_tile_steel_mill_2_W;	1,3: ind_tile_steel_mill_2_W;

    2,0: ind_tile_steel_mill_2_N;	2,1: ind_tile_steel_mill_2_N;	2,2: ind_tile_steel_mill_1_N;	2,3: ind_tile_steel_mill_1_E;
    3,0: ind_tile_steel_mill_2_W;	3,1: ind_tile_steel_mill_2_W;	3,2: ind_tile_steel_mill_1_W;	3,3: ind_tile_steel_mill_1_S;

    4,0: ind_tile_steel_mill_1_N;	4,1: ind_tile_steel_mill_1_E;	4,2: ind_tile_steel_mill_1_N;	4,3: ind_tile_steel_mill_1_E;
    5,0: ind_tile_steel_mill_1_W;	5,1: ind_tile_steel_mill_1_S;	5,2: ind_tile_steel_mill_1_W;	5,3: ind_tile_steel_mill_1_S;
}

/*
 * Register 1: Total production amount
 * Register 2: Passenger production
 * Register 3: Amount of scrap to consume
 * Register 4: Amount of normal input to consume
 */

produce (produce_steel_mill,
    [SCMT: LOAD_TEMP(3); COAL: LOAD_TEMP(4); IORE: LOAD_TEMP(4);],  // consume
    [STEL: LOAD_TEMP(3) + (LOAD_TEMP(4) * 2); PASS: LOAD_TEMP(2);], // produce
    0                                                               // don't run callback again
)

/* If we don't have enough stored, produce as much as we can anyway. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_steel_mill_min, [
    STORE_TEMP(min(incoming_cargo_waiting("IORE"), incoming_cargo_waiting("COAL")), 4),
    STORE_TEMP(LOAD_TEMP(3) + LOAD_TEMP(4), 1),
    ]) {produce_steel_mill;}

/* Determine the production level and see if we have enough stored to meet it. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_steel_mill_2, [
    /* Set the passenger production amount. */
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("STEL")) / 100), 2),

    /* Get the target production amount */
    STORE_TEMP(GetSecondaryProductionLevel(), 1),
    /* How much of the production can be met with scrap? */
    STORE_TEMP(min(LOAD_TEMP(1), incoming_cargo_waiting("SCMT")), 3),
    /* Make up the rest in normal input. */
    STORE_TEMP(LOAD_TEMP(1) - LOAD_TEMP(3), 4),
    /* Check if there's enough input cargo for this production level. */
    min(incoming_cargo_waiting("IORE"), incoming_cargo_waiting("COAL")) > LOAD_TEMP(4),
    ]) {
        1: produce_steel_mill;
        switch_produce_steel_mill_min;
    }

/* If no cargo is waiting, bail out. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_steel_mill, incoming_cargo_waiting("SCMT") > 0 || min(incoming_cargo_waiting("IORE"), incoming_cargo_waiting("COAL")) > 0)
    {
        1: switch_produce_steel_mill_2;
        produce_none;
    }

/* Location check */
switch (FEAT_INDUSTRIES, SELF, loc_check_steel_mill, IsCity() && IsNearTown() && CityHasNoSecondaryIndustries() && NoNearbyCompetitors(industry_steel_mill, 100)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_LOC_ERROR_SECONDARY);}

item (FEAT_INDUSTRIES, industry_steel_mill, 2) {
	property {
		substitute: INDUSTRYTYPE_STEEL_MILL;
		override: INDUSTRYTYPE_STEEL_MILL;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
            accept_cargo("IORE"),
		    accept_cargo("COAL"),
            accept_cargo("SCMT"),
            produce_cargo("STEL", 0),
            produce_cargo("PASS", 0),
		];
		name: TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_STEEL_MILL));
        prob_map_gen: 1;
        prob_in_game: 0;
		fund_cost_multiplier: 255;
		layouts: [industry_layout_steel_mill_1,];
		map_colour: 10;
	}
	graphics {
		extra_text_industry: StringGetSecondaryHelptext();
        location_check: loc_check_steel_mill;
        produce_256_ticks: switch_produce_steel_mill;
        /* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_steel_mill_1, relative_pos) {
	relative_coord(0, 0): sprlay_steel_mill_1_N;
	relative_coord(0, 1): sprlay_steel_mill_1_E;
	relative_coord(1, 0): sprlay_steel_mill_1_W;
    relative_coord(1, 1): sprlay_steel_mill_1_S;
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_steel_mill_2, relative_pos) {
	relative_coord(0, 0): sprlay_steel_mill_2_N;
	relative_coord(1, 0): sprlay_steel_mill_2_W;
}

item (FEAT_OBJECTS, object_item_steel_mill_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_steel_mill_1;
		purchase:				sprlay_steel_mill_1_N;
	}
}

item (FEAT_OBJECTS, object_item_steel_mill_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,1];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_steel_mill_2;
		purchase:				sprlay_steel_mill_2_N;
	}
}

/* *** End Steel Mill *** */
